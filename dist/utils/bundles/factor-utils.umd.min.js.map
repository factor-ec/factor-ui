{"version":3,"sources":["ng://factor-utils/lib/storage.service.ts","ng://factor-utils/lib/google-analytics.service.ts","ng://factor-utils/lib/google-analytics-error-handler.ts","ng://factor-utils/lib/google-tag-manager-error-handler.ts","ng://factor-utils/lib/google-tag-manager.service.ts","ng://factor-utils/lib/files-list.ts","ng://factor-utils/lib/utils.module.ts"],"names":["StorageService","prototype","delete","key","storage","isPlatformBrowser","this","platformId","localStorage","memoryStorage","sessionStorage","get","parsedValue","JSON","parse","getValue","err","value","decrypt","undefined","configuration","encryptionSecret","CryptoJS.AES","toString","CryptoJS.enc","Utf8","encrypt","set","valueEncrypted","stringify","Injectable","args","providedIn","Object","decorators","type","Inject","PLATFORM_ID","GoogleAnalyticsService","appendTrackingCode","trackingId","s1","document","createElement","async","src","head","appendChild","s2","innerHTML","initSubscribers","ex","console","error","_this","router","events","subscribe","event","gtag","NavigationEnd","setTimeout","page_title","title","page_path","urlAfterRedirects","e","trackEvent","action","category","label","event_category","event_label","trackException","description","fatal","setUserId","userId","user_id","Router","GoogleAnalyticsErrorHandler","handleError","googleAnalyticsService","injector","HttpErrorResponse","navigator","onLine","message","url","status","location_1","LocationStrategy","stack","PathLocationStrategy","path","Injector","GoogleTagManagerErrorHandler","window","dataLayer","push","gtm.errorMessage","gtm.errorUrl","error_status","GoogleTagManagerService","s3","width","height","style","display","visibility","prepend","addVariable","variable","FilesList","loadValue","files","length","data_1","i","file","item","reader","FileReader","readAsDataURL","onload","data","result","lastModifiedDate","name","size","valueChangesSubject","next","open","fileInput","click","options","BehaviorSubject","valueChanges","asObservable","accept","multiple","addEventListener","target","body","UtilsModule","forRoot","ngModule","providers","provide","useValue","NgModule","declarations","imports","exports"],"mappings":"ohBAMA,IAAAA,GAWSA,EAAAC,UAAAC,UAAP,SAAcC,EAAaC,GACzB,GAAIC,EAAAA,kBAAkBC,KAAKC,YACzB,GAAKH,GAA6B,iBAAXA,EAaM,iBAAXA,UACTA,EAAQD,QAbf,OAAQC,GACN,IAAK,QACL,IAAK,sBACII,aAAaL,GACpB,MACF,IAAK,gBACIG,KAAKG,cAAcN,GAC1B,MACF,eACSO,eAAeP,KAQzBH,EAAAC,UAAAU,IAAP,SAAWR,EAAaC,OAClBQ,EACJ,GAAIP,EAAAA,kBAAkBC,KAAKC,YACzB,IACEK,EAAcC,KAAKC,MAAMR,KAAKS,SAASZ,EAAKC,IAC5C,MAAOY,GACPJ,EAAcN,KAAKS,SAASZ,EAAKC,GAGrC,OAAOQ,GAEDZ,EAAAC,UAAAc,SAAR,SAAiBZ,EAAaC,OACxBa,EACJ,GAAKb,GAA6B,iBAAXA,EAaM,iBAAXA,IAChBa,EAAQb,EAAQD,SAbhB,OAAQC,GACN,IAAK,QACL,IAAK,eACHa,EAAQT,aAAaL,GACrB,MACF,IAAK,SACHc,EAAQX,KAAKG,cAAcN,GAC3B,MACF,QACEc,EAAQP,eAAeP,GAM7B,OAAOG,KAAKY,QAAQD,IAEdjB,EAAAC,UAAAiB,QAAR,SAAgBD,GAUd,OATc,OAAVA,GACFA,IAAUE,WACA,KAAVF,GACAX,KAAKc,eACLd,KAAKc,cAAchB,SACnBE,KAAKc,cAAchB,QAAQiB,mBAE3BJ,EADuBK,EAAAA,IAAaJ,QAAQD,EAAOX,KAAKc,cAAchB,QAAQiB,kBACvDE,SAASC,EAAAA,IAAaC,OAExCR,GAEDjB,EAAAC,UAAAyB,QAAR,SAAgBT,GACd,OAAc,OAAVA,GACFA,IAAUE,WACA,KAAVF,GACAX,KAAKc,eACLd,KAAKc,cAAchB,SACnBE,KAAKc,cAAchB,QAAQiB,kBAC3BJ,EAAQK,EAAAA,IAAaI,QAAQT,EAAOX,KAAKc,cAAchB,QAAQiB,mBAClDE,WAENN,GAIJjB,EAAAC,UAAA0B,IAAP,SAAWxB,EAAac,EAAYb,GAClC,GAAIC,EAAAA,kBAAkBC,KAAKC,YAAa,KAChCqB,EAAiBtB,KAAKoB,QAAQb,KAAKgB,UAAUZ,IACnD,GAAKb,GAA6B,iBAAXA,EAcrBA,EAAQD,GAAOyB,OAbf,OAAQxB,GACN,IAAK,QACL,IAAK,eACHI,aAAaL,GAAOyB,EACpB,MACF,IAAK,SACHtB,KAAKG,cAAcN,GAAOyB,EAC1B,MACF,QACElB,eAAeP,GAAOyB,yBArGjCE,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAM+BC,OAAMC,WAAA,CAAA,CAAAC,KAA9CC,EAAAA,OAAML,KAAA,CAACM,EAAAA,kDACPD,EAAAA,OAAML,KAAA,CAAC,qMAFV,SAAA/B,EAC+BO,EACea,GADfd,KAAAC,WAAAA,EACeD,KAAAc,cAAAA,ECdhD,IAAAkB,GAeSA,EAAArC,UAAAsC,mBAAP,SAA0BC,GACxB,IACE,GAAIA,EAAY,CACdlC,KAAKkC,WAAaA,MACZC,EAAKC,SAASC,cAAc,UAClCF,EAAGG,OAAQ,EACXH,EAAGI,IAAM,+CAA+CL,EACxDE,SAASI,KAAKC,YAAYN,OACpBO,EAAKN,SAASC,cAAc,UAClCK,EAAGC,UAAY,2KAIIT,EAAU,eAE7BE,SAASI,KAAKC,YAAYC,GAC1B1C,KAAK4C,mBAEP,MAAOC,GACPC,QAAQC,MAAM,oCACdD,QAAQC,MAAMF,KAGVb,EAAArC,UAAAiD,gBAAR,WAAA,IAAAI,EAAAhD,KACEA,KAAKiD,OAAOC,OAAOC,UAAS,SAACC,GAC3B,IACsB,mBAATC,MACLD,aAAiBE,EAAAA,eAAiBN,EAAKd,YACzCqB,WAAU,WACRF,KAAK,SAAUL,EAAKd,WAAY,CAC9BsB,WAAcpB,SAASqB,MACvBC,UAAaN,EAAMO,qBAEpB,KAGP,MAAOC,GACPd,QAAQC,MAAMa,OAIb5B,EAAArC,UAAAkE,WAAP,SAAkBC,EAAgBC,EAAyBC,EAAsBrD,QAA/C,IAAAoD,IAAAA,EAAA,WAAyB,IAAAC,IAAAA,EAAA,WAAsB,IAAArD,IAAAA,EAAA,MAC3D,mBAAT0C,MACTA,KAAK,QAASS,EAAQ,CACpBG,eAAgBF,EAChBG,YAAaF,EACbrD,MAAOA,KAINqB,EAAArC,UAAAwE,eAAP,SAAsBC,EAAqBC,GACrB,mBAAThB,MACTA,KAAK,QAAS,YAAa,CACzBe,YAAaA,EACbC,MAAOA,KAINrC,EAAArC,UAAA2E,UAAP,SAAiBC,GACK,mBAATlB,MACTA,KAAK,MAAO,CAAEmB,QAAWD,yBArE9B/C,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDANU+C,EAAAA,oIAWtB,SAAAzC,EACSiB,GAAAjD,KAAAiD,OAAAA,ECbX,IAAAyB,GAaEA,EAAA/E,UAAAgF,YAAA,SAAY5B,OACJ6B,EAAyB5E,KAAK6E,SAASxE,IAAI2B,GACjD,GAAIe,aAAiB+B,EAAAA,mBACnB,GAAIC,UAAUC,OAAQ,KACdC,EAAUlC,EAAMA,MAAQxC,KAAKgB,UAAUwB,EAAMA,OAASA,EAAMkC,QAClEL,EAAuBf,WAAWd,EAAMmC,IAAK,aAAiBnC,EAAMoC,OAAM,MAAMF,QAE7E,KACCG,EAAWpF,KAAK6E,SAASxE,IAAIgF,EAAAA,kBAE7BC,GADAL,EAAUlC,EAAMkC,QAAUlC,EAAMkC,QAAUlC,EAAM9B,WACxC8B,EAAMuC,MAAQvC,EAAMuC,MAAQvC,EAAM9B,YACpCmE,aAAoBG,EAAAA,sBAAuBH,EAASI,OAChEZ,EAAuBf,WAAWoB,EAAS,mBAAoBK,GAEjE,MAAMvC,uBArBTvB,EAAAA,sDANkCiE,EAAAA,YA6BnCf,GApBE,SAAAA,EACUG,GAAA7E,KAAA6E,SAAAA,ECVZ,IAAAa,GAaEA,EAAA/F,UAAAgF,YAAA,SAAY5B,GACV,GAAIA,aAAiB+B,EAAAA,mBACfC,UAAUC,OAAQ,KACdC,EAAUlC,EAAMA,MAAQxC,KAAKgB,UAAUwB,EAAMA,OAASA,EAAMkC,QAClEU,OAAOC,UAAYD,OAAOC,WAAa,GACvCD,OAAOC,UAAUC,KAAK,CACpBzC,MAAO,aACP0C,mBAAoBb,EACpBc,eAAgBhD,EAAMmC,IACtBc,aAAgBjD,EAAMoC,SAkB5B,MAAMpC,uBAlCTvB,EAAAA,sDANkCiE,EAAAA,YA0CnCC,GAjCE,SAAAA,EACUb,GAAA7E,KAAA6E,SAAAA,ECVZ,IAAAoB,GAiBSA,EAAAtG,UAAAsC,mBAAP,SAA0BC,GACxB,IACE,GAAInC,EAAAA,kBAAkBC,KAAKC,aAAeiC,EAAY,CACpDlC,KAAKkC,WAAaA,MACZC,EAAkBC,SAASC,cAAc,UAC/CF,EAAGQ,UAAY,kYAK8BT,EAAU,gBAEvDE,SAASI,KAAKC,YAAYN,OACpBO,EAAkBN,SAASC,cAAc,YACzC6D,EAAwB9D,SAASC,cAAc,UACrD6D,EAAGC,MAAQ,IACXD,EAAGE,OAAS,IACZF,EAAGG,MAAMC,QAAU,OACnBJ,EAAGG,MAAME,WAAa,SACtBL,EAAG3D,IAAM,+CAA+CL,EACxDQ,EAAGD,YAAYyD,GACd9D,SAAa,KAAyBoE,QAAQ9D,IAEjD,MAAOG,GACPC,QAAQC,MAAM,sCACdD,QAAQC,MAAMF,KAGXoD,EAAAtG,UAAA8G,YAAP,SAAmBC,GACjBf,OAAOC,UAAYD,OAAOC,WAAa,GACvCD,OAAOC,UAAUC,KAAKa,wBAxCzBlF,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAM+BC,OAAMC,WAAA,CAAA,CAAAC,KAA9CC,EAAAA,OAAML,KAAA,CAACM,EAAAA,iJADV,SAAAkE,EAC+BhG,GAAAD,KAAAC,WAAAA,ECdjC,IAAA0G,GAqBUA,EAAAhH,UAAAiH,UAAR,SAAkBC,GAAlB,IAAA7D,EAAAhD,KACE,GAAI6G,GAAwB,EAAfA,EAAMC,OAEjB,QADIC,EAAc,cACTC,OACDC,EAAOJ,EAAMK,KAAKF,GAClBG,EAAS,IAAIC,WACnBD,EAAOE,cAAcJ,GACrBE,EAAOG,OAAM,WACXP,EAAKlB,KAAK,CACR0B,KAAMJ,EAAOK,OACbC,iBAAkBR,EAAKQ,iBACvBC,KAAMT,EAAKS,KACXC,KAAMV,EAAKU,OAGTZ,EAAKD,QAAUD,EAAMC,QACvB9D,EAAK4E,oBAAoBC,KAAmB,EAAdd,EAAKD,OAAaC,EAAO,QAbpDC,EAAI,EAAGA,EAAIH,EAAMC,OAAQE,MAAzBA,IAmBNL,EAAAhH,UAAAmI,KAAP,WACE9H,KAAK+H,UAAUC,SAEnBrB,GArCE,SAAAA,EAAYsB,GAAZ,IAAAjF,EAAAhD,KAHAA,KAAA4H,oBAA8C,IAAIM,EAAAA,gBAAuB,MACzElI,KAAAmI,aAAkCnI,KAAK4H,oBAAoBQ,eAGzDpI,KAAK+H,UAAY3F,SAASC,cAAc,SACxCrC,KAAK+H,UAAU1B,MAAMC,QAAU,OAC/BtG,KAAK+H,UAAUlG,KAAO,OACtB7B,KAAK+H,UAAUM,OAASJ,GAAWA,EAAQI,OAAQJ,EAAQI,OAAS,GACpErI,KAAK+H,UAAUO,SAAWL,GAAWA,EAAQK,SAC7CtI,KAAK+H,UAAUQ,iBAAiB,SAAQ,SAAGnF,GAC1B,IAAIgE,WACnBpE,EAAK4D,UAAUxD,EAAMoF,OAAO3B,SAE9BzE,SAASqG,KAAKhG,YAAYzC,KAAK+H,WCnBnC,IAAAW,GAcgBA,EAAAC,QAAd,SAAsB7H,GACpB,MAAO,CACL8H,SAAUF,EACVG,UAAW,CACT,CAAEC,QAAS,2BAA4BC,SAAUjI,0BAhBxDkI,EAAAA,SAAQvH,KAAA,CAAC,CACRwH,aAAc,GAGdC,QAAS,GAGTC,QAAS,OAaXT,GApBA,SAAAA","sourcesContent":["import { Component, Inject, Injectable, OnInit, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport * as CryptoJS from 'crypto-js';\n\n// Only works on client storage\n@Injectable({\n  providedIn: 'root'\n})\nexport class StorageService {\n  memoryStorage: any;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    @Inject('FactorUtilsConfiguration') private configuration\n  ) { }\n\n  public delete(key: string, storage?) {\n    if (isPlatformBrowser(this.platformId)) {\n      if (!storage || typeof storage == 'string') {\n        switch (storage) {\n          case 'local':\n          case 'localStorage':\n            delete localStorage[key];\n            break;\n          case 'memory':\n            delete this.memoryStorage[key];\n            break;\n          default:\n            delete sessionStorage[key];\n            break;\n        }\n      } else if (typeof storage == 'object') {\n        delete storage[key];\n      }\n    }\n  }\n  public get(key: string, storage?): any {\n    let parsedValue: any;\n    if (isPlatformBrowser(this.platformId)) {\n      try {\n        parsedValue = JSON.parse(this.getValue(key, storage));\n      } catch (err) {\n        parsedValue = this.getValue(key, storage);\n      }\n    }\n    return parsedValue;\n  }\n  private getValue(key: string, storage?: any): any {\n    let value: any;\n    if (!storage || typeof storage == 'string') {\n      switch (storage) {\n        case 'local':\n        case 'localStorage':\n          value = localStorage[key];\n          break;\n        case 'memory':\n          value = this.memoryStorage[key];\n          break;\n        default:\n          value = sessionStorage[key];\n          break;\n      }\n    } else if (typeof storage == 'object') {\n      value = storage[key];\n    }\n    return this.decrypt(value);\n  }\n  private decrypt(value: string) {\n    if (value !== null &&\n      value !== undefined &&\n      value !== '' &&\n      this.configuration &&\n      this.configuration.storage &&\n      this.configuration.storage.encryptionSecret) {\n      const decryptedValue = CryptoJS.AES.decrypt(value, this.configuration.storage.encryptionSecret);\n      value = decryptedValue.toString(CryptoJS.enc.Utf8);\n    }\n    return value;\n  }\n  private encrypt(value: string) {\n    if (value !== null &&\n      value !== undefined &&\n      value !== '' &&\n      this.configuration &&\n      this.configuration.storage &&\n      this.configuration.storage.encryptionSecret) {\n      value = CryptoJS.AES.encrypt(value, this.configuration.storage.encryptionSecret);\n      return value.toString();\n    } else {\n      return value;\n    }\n\n  }\n  public set(key: string, value: any, storage?) {\n    if (isPlatformBrowser(this.platformId)) {\n      const valueEncrypted = this.encrypt(JSON.stringify(value));\n      if (!storage || typeof storage == 'string') {\n        switch (storage) {\n          case 'local':\n          case 'localStorage':\n            localStorage[key] = valueEncrypted;\n            break;\n          case 'memory':\n            this.memoryStorage[key] = valueEncrypted;\n            break;\n          default:\n            sessionStorage[key] = valueEncrypted;\n            break;\n        }\n      } else {\n        storage[key] = valueEncrypted;\n      }\n    }\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { fromEvent } from 'rxjs';\n\ndeclare var gtag: Function;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GoogleAnalyticsService {\n  private trackingId: string;\n\n  constructor(\n    public router: Router\n  ) { }\n  public appendTrackingCode(trackingId: string) {\n    try {\n      if (trackingId) {\n        this.trackingId = trackingId;\n        const s1 = document.createElement('script');\n        s1.async = true;\n        s1.src = `https://www.googletagmanager.com/gtag/js?id=${trackingId}`;\n        document.head.appendChild(s1);\n        const s2 = document.createElement('script');\n        s2.innerHTML = `\n         window.dataLayer = window.dataLayer || [];\n         function gtag(){dataLayer.push(arguments);}\n         gtag('js', new Date());\n         gtag('config', '${trackingId}');\n       `;\n        document.head.appendChild(s2);\n        this.initSubscribers();\n      }\n    } catch (ex) {\n      console.error('Error appending google analytics');\n      console.error(ex);\n    }\n  }\n  private initSubscribers() {\n    this.router.events.subscribe(event => {\n      try {\n        if (typeof gtag === 'function') {\n          if (event instanceof NavigationEnd && this.trackingId) {\n            setTimeout(() => {\n              gtag('config', this.trackingId, {\n                'page_title': document.title,\n                'page_path': event.urlAfterRedirects\n              });\n            }, 100);\n          }\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n  public trackEvent(action: string, category: string = null, label: string = null, value: number = null) {\n    if (typeof gtag === 'function') {\n      gtag('event', action, {\n        event_category: category,\n        event_label: label,\n        value: value\n      });\n    }\n  }\n  public trackException(description: string, fatal: boolean) {\n    if (typeof gtag === 'function') {\n      gtag('event', 'exception', {\n        description: description,\n        fatal: fatal\n      });\n    }\n  }\n  public setUserId(userId: string) {\n    if (typeof gtag === 'function') {\n      gtag('set', { 'user_id': userId });\n    }\n  }\n}\n","import { ErrorHandler, Injectable, Injector } from '@angular/core';\nimport { LocationStrategy, PathLocationStrategy } from '@angular/common';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { GoogleAnalyticsService } from './google-analytics.service';\n\n@Injectable()\nexport class GoogleAnalyticsErrorHandler implements ErrorHandler {\n\n  constructor(\n    private injector: Injector\n  ) { }\n\n  handleError(error: Error |Â HttpErrorResponse) {\n    const googleAnalyticsService = this.injector.get(GoogleAnalyticsService);\n    if (error instanceof HttpErrorResponse) {\n      if (navigator.onLine) {\n        const message = error.error ? JSON.stringify(error.error) : error.message;\n        googleAnalyticsService.trackEvent(error.url, 'Http Error', `${error.status} - ${message}`);\n      }\n    } else {\n      const location = this.injector.get(LocationStrategy);\n      const message = error.message ? error.message : error.toString();\n      const stack = error.stack ? error.stack : error.toString();\n      const url = location instanceof PathLocationStrategy ? location.path() : '';\n      googleAnalyticsService.trackEvent(message, 'Javascript Error', stack);\n    }\n    throw error;\n  }\n}\n","import { ErrorHandler, Injectable, Injector } from '@angular/core';\nimport { LocationStrategy, PathLocationStrategy } from '@angular/common';\nimport { HttpErrorResponse } from '@angular/common/http';\n\ndeclare var window: any;\n\n@Injectable()\nexport class GoogleTagManagerErrorHandler implements ErrorHandler {\n\n  constructor(\n    private injector: Injector\n  ) { }\n\n  handleError(error: Error |Â HttpErrorResponse) {\n    if (error instanceof HttpErrorResponse) {\n      if (navigator.onLine) {\n        const message = error.error ? JSON.stringify(error.error) : error.message;\n        window.dataLayer = window.dataLayer || [];\n        window.dataLayer.push({\n          event: 'http_error',\n          'gtm.errorMessage': message,\n          'gtm.errorUrl': error.url,\n          'error_status': error.status\n        });\n      }\n    } /* else {\n      // DEPRECATED: Google Tag Manager automatically collect javascript errors this not neccesary now\n      const location = this.injector.get(LocationStrategy);\n      const message = error.message ? error.message : error.toString();\n      const stack = error.stack ? error.stack : error.toString();\n      const url = location instanceof PathLocationStrategy ? location.path() : '';\n      window.dataLayer = window.dataLayer || [];\n      window.dataLayer.push({\n        event: 'javascript_error',\n        'gtm.errorMessage': message,\n        'gtm.errorUrl': url,\n        'error_stack': stack,\n\n      });\n    }*/\n    throw error;\n  }\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport { HTMLElementExtended } from './html-element-extended';\n\ndeclare var window: any;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GoogleTagManagerService {\n  trackingId: string;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n  ) { }\n\n  public appendTrackingCode(trackingId: string): void {\n    try {\n      if (isPlatformBrowser(this.platformId) && trackingId) {\n        this.trackingId = trackingId;\n        const s1: HTMLElement = document.createElement('script');\n        s1.innerHTML = `\n          (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':\n          new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],\n          j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=\n          'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);\n          })(window,document,'script','dataLayer','${trackingId}');\n        `;\n        document.head.appendChild(s1);\n        const s2: HTMLElement = document.createElement('noscript');\n        const s3: HTMLIFrameElement = document.createElement('iframe');\n        s3.width = '0';\n        s3.height = '0';\n        s3.style.display = 'none';\n        s3.style.visibility = 'hidden';\n        s3.src = `https://www.googletagmanager.com/ns.html?id=${trackingId}`\n        s2.appendChild(s3);\n        (document.body as HTMLElementExtended).prepend(s2);\n      }\n    } catch (ex) {\n      console.error('Error appending google tag manager');\n      console.error(ex);\n    }\n  }\n  public addVariable(variable) {\n    window.dataLayer = window.dataLayer || [];\n    window.dataLayer.push(variable);\n  }\n}\n","import { BehaviorSubject, Observable } from \"rxjs\";\n\ndeclare var document: any;\n\nexport class FilesList {\n  private fileInput: HTMLInputElement;\n  valueChangesSubject: BehaviorSubject<any[]> = new BehaviorSubject<any[]>(null);\n  valueChanges: Observable<any[]> = this.valueChangesSubject.asObservable();\n\n  constructor(options: any) {\n    this.fileInput = document.createElement('input');\n    this.fileInput.style.display = 'none';\n    this.fileInput.type = 'file';\n    this.fileInput.accept = options && options.accept? options.accept : '';\n    this.fileInput.multiple = options && options.multiple;\n    this.fileInput.addEventListener('change', (event: any) => {\n      const reader = new FileReader();\n      this.loadValue(event.target.files);\n    });\n    document.body.appendChild(this.fileInput);\n  }\n  private loadValue(files) {\n    if (files && files.length > 0) {\n      let data: any[] = [];\n      for (let i = 0; i < files.length; i++) {\n        const file = files.item(i);\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = () => {\n          data.push({\n            data: reader.result,\n            lastModifiedDate: file.lastModifiedDate,\n            name: file.name,\n            size: file.size/*,\n            type: file.type*/\n          });\n          if (data.length == files.length) {\n            this.valueChangesSubject.next(data.length > 0 ? data : null);\n          }\n        };\n      }\n    }\n  }\n  public open() {\n    this.fileInput.click();\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\n@NgModule({\n  declarations: [\n\n  ],\n  imports: [\n\n  ],\n  exports: [\n\n  ]\n})\nexport class UtilsModule {\n  public static forRoot(configuration: any): ModuleWithProviders {\n    return {\n      ngModule: UtilsModule,\n      providers: [\n        { provide: 'FactorUtilsConfiguration', useValue: configuration }\n      ]\n    };\n  }\n}\n"]}