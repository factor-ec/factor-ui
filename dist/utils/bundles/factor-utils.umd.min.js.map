{"version":3,"sources":["ng://factor-utils/lib/storage.service.ts","ng://factor-utils/lib/google-analytics.service.ts","ng://factor-utils/lib/google-analytics-error-handler.ts","ng://factor-utils/lib/google-tag-manager-error-handler.ts","ng://factor-utils/lib/google-tag-manager.service.ts","ng://factor-utils/lib/utils.module.ts"],"names":["StorageService","platformId","configuration","this","prototype","delete","key","storage","isPlatformBrowser","localStorage","sessionStorage","get","parsedValue","JSON","parse","getValue","err","value","decrypt","undefined","encryptionSecret","CryptoJS.AES","toString","CryptoJS.enc","Utf8","encrypt","set","valueEncrypted","stringify","Injectable","args","providedIn","Object","decorators","type","Inject","PLATFORM_ID","GoogleAnalyticsService","router","appendTrackingCode","trackingId","s1","document","createElement","async","src","head","appendChild","s2","innerHTML","initSubscribers","ex","console","error","_this","events","subscribe","event","gtag","NavigationEnd","setTimeout","page_title","title","page_path","urlAfterRedirects","e","trackEvent","action","category","label","event_category","event_label","trackException","description","fatal","setUserId","userId","user_id","Router","GoogleAnalyticsErrorHandler","injector","handleError","googleAnalyticsService","HttpErrorResponse","navigator","onLine","message","url","status","location_1","LocationStrategy","stack","PathLocationStrategy","path","Injector","GoogleTagManagerErrorHandler","window","dataLayer","push","error_message","error_status","error_url","error_stack","GoogleTagManagerService","s3","width","height","style","display","visibility","prepend","UtilsModule","forRoot","ngModule","providers","provide","useValue","NgModule","declarations","imports","exports"],"mappings":"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","sourcesContent":["import { Component, Inject, Injectable, OnInit, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport * as CryptoJS from 'crypto-js';\n\n// Only works on client storage\n@Injectable({\n  providedIn: 'root'\n})\nexport class StorageService {\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    @Inject('FactorUtilsConfiguration') private configuration\n  ) { }\n\n  delete(key: string, storage?) {\n    if (isPlatformBrowser(this.platformId)) {\n      if (!storage || typeof storage == 'string') {\n        switch (storage) {\n          case 'localStorage':\n            delete localStorage[key];\n            break;\n          default:\n            delete sessionStorage[key];\n            break;\n        }\n      } else if (typeof storage == 'object') {\n        delete storage[key];\n      }\n    }\n  }\n  get(key: string, storage?): any {\n    let parsedValue: any;\n    if (isPlatformBrowser(this.platformId)) {\n      try {\n        parsedValue = JSON.parse(this.getValue(key, storage));\n      } catch (err) {\n        parsedValue = this.getValue(key, storage);\n      }\n    }\n    return parsedValue;\n  }\n  getValue(key: string, storage?: any): any {\n    let value: any;\n    if (!storage || typeof storage == 'string') {\n      switch (storage) {\n        case 'localStorage':\n          value = localStorage[key];\n          break;\n        default:\n          value = sessionStorage[key];\n          break;\n      }\n    } else if (typeof storage == 'object') {\n      value = storage[key];\n    }\n    return this.decrypt(value);\n  }\n  decrypt(value: string) {\n    if (value !== null &&\n      value !== undefined &&\n      value !== '' &&\n      this.configuration &&\n      this.configuration.storage &&\n      this.configuration.storage.encryptionSecret) {\n      const decryptedValue = CryptoJS.AES.decrypt(value, this.configuration.storage.encryptionSecret);\n      value = decryptedValue.toString(CryptoJS.enc.Utf8);\n    }\n    return value;\n  }\n  encrypt(value: string) {\n    if (value !== null &&\n      value !== undefined &&\n      value !== '' &&\n      this.configuration &&\n      this.configuration.storage &&\n      this.configuration.storage.encryptionSecret) {\n      value = CryptoJS.AES.encrypt(value, this.configuration.storage.encryptionSecret);\n    }\n    return value.toString();\n  }\n  set(key: string, value: any, storage?) {\n    if (isPlatformBrowser(this.platformId)) {\n      const valueEncrypted = this.encrypt(JSON.stringify(value));\n      if (!storage || typeof storage == 'string') {\n        switch (storage) {\n          case 'localStorage':\n            localStorage[key] = valueEncrypted;\n            break;\n          default:\n            sessionStorage[key] = valueEncrypted;\n            break;\n        }\n      } else {\n        storage[key] = valueEncrypted;\n      }\n    }\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { fromEvent } from 'rxjs';\n\ndeclare var gtag: Function;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GoogleAnalyticsService {\n  private trackingId: string;\n\n  constructor(\n    public router: Router\n  ) { }\n  public appendTrackingCode(trackingId: string) {\n    try {\n      if (trackingId) {\n        this.trackingId = trackingId;\n        const s1 = document.createElement('script');\n        s1.async = true;\n        s1.src = `https://www.googletagmanager.com/gtag/js?id=${trackingId}`;\n        document.head.appendChild(s1);\n        const s2 = document.createElement('script');\n        s2.innerHTML = `\n         window.dataLayer = window.dataLayer || [];\n         function gtag(){dataLayer.push(arguments);}\n         gtag('js', new Date());\n         gtag('config', '${trackingId}');\n       `;\n        document.head.appendChild(s2);\n        this.initSubscribers();\n      }\n    } catch (ex) {\n      console.error('Error appending google analytics');\n      console.error(ex);\n    }\n  }\n  private initSubscribers() {\n    this.router.events.subscribe(event => {\n      try {\n        if (typeof gtag === 'function') {\n          if (event instanceof NavigationEnd && this.trackingId) {\n            setTimeout(() => {\n              gtag('config', this.trackingId, {\n                'page_title': document.title,\n                'page_path': event.urlAfterRedirects\n              });\n            }, 100);\n          }\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n  public trackEvent(action: string, category: string = null, label: string = null, value: number = null) {\n    if (typeof gtag === 'function') {\n      gtag('event', action, {\n        event_category: category,\n        event_label: label,\n        value: value\n      });\n    }\n  }\n  public trackException(description: string, fatal: boolean) {\n    if (typeof gtag === 'function') {\n      gtag('event', 'exception', {\n        description: description,\n        fatal: fatal\n      });\n    }\n  }\n  public setUserId(userId: string) {\n    if (typeof gtag === 'function') {\n      gtag('set', { 'user_id': userId });\n    }\n  }\n}\n","import { ErrorHandler, Injectable, Injector } from '@angular/core';\nimport { LocationStrategy, PathLocationStrategy } from '@angular/common';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { GoogleAnalyticsService } from './google-analytics.service';\n\n@Injectable()\nexport class GoogleAnalyticsErrorHandler implements ErrorHandler {\n\n  constructor(\n    private injector: Injector\n  ) { }\n\n  handleError(error: Error |Â HttpErrorResponse) {\n    const googleAnalyticsService = this.injector.get(GoogleAnalyticsService);\n    if (error instanceof HttpErrorResponse) {\n      if (navigator.onLine) {\n        const message = error.error ? JSON.stringify(error.error) : error.message;\n        googleAnalyticsService.trackEvent(error.url, 'Http Error', `${error.status} - ${message}`);\n      }\n    } else {\n      const location = this.injector.get(LocationStrategy);\n      const message = error.message ? error.message : error.toString();\n      const stack = error.stack ? error.stack : error.toString();\n      const url = location instanceof PathLocationStrategy ? location.path() : '';\n      googleAnalyticsService.trackEvent(message, 'Javascript Error', stack);\n    }\n    throw error;\n  }\n}\n","import { ErrorHandler, Injectable, Injector } from '@angular/core';\nimport { LocationStrategy, PathLocationStrategy } from '@angular/common';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { GoogleTagManagerService } from './google-tag-manager.service';\n\ndeclare var window: any;\n\nexport class GoogleTagManagerErrorHandler implements ErrorHandler {\n\n  constructor(\n    private injector: Injector\n  ) { }\n\n  handleError(error: Error |Â HttpErrorResponse) {\n    if (error instanceof HttpErrorResponse) {\n      if (navigator.onLine) {\n        const message = error.error ? JSON.stringify(error.error) : error.message;\n        window.dataLayer = window.dataLayer || [];\n        window.dataLayer.push({\n          event: 'http_error',\n          error_message: message,\n          error_status: error.status,\n          error_url: error.url\n        });\n      }\n    } else {\n      const location = this.injector.get(LocationStrategy);\n      const message = error.message ? error.message : error.toString();\n      const stack = error.stack ? error.stack : error.toString();\n      const url = location instanceof PathLocationStrategy ? location.path() : '';\n      window.dataLayer = window.dataLayer || [];\n      window.dataLayer.push({\n        event: 'javascript_error',\n        error_message: message,\n        error_stack: stack,\n        error_url: url\n      });\n    }\n    throw error;\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { HTMLElementExtended } from './html-element-extended';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GoogleTagManagerService {\n  trackingId: string;\n\n  constructor() { }\n\n  public appendTrackingCode(trackingId: string): void {\n    try {\n      if (trackingId) {\n        this.trackingId = trackingId;\n        const s1: HTMLElement = document.createElement('script');\n        s1.innerHTML = `\n          (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':\n          new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],\n          j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=\n          'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);\n          })(window,document,'script','dataLayer','${trackingId}');\n        `;\n        document.head.appendChild(s1);\n        const s2: HTMLElement = document.createElement('noscript');\n        const s3: HTMLIFrameElement = document.createElement('iframe');\n        s3.width = '0';\n        s3.height = '0';\n        s3.style.display = 'none';\n        s3.style.visibility = 'hidden';\n        s3.src = `https://www.googletagmanager.com/ns.html?id=${trackingId}`\n        s2.appendChild(s3);\n        (document.body as HTMLElementExtended).prepend(s2);\n      }\n    } catch (ex) {\n      console.error('Error appending google tag manager');\n      console.error(ex);\n    }\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\n@NgModule({\n  declarations: [\n\n  ],\n  imports: [\n\n  ],\n  exports: [\n\n  ]\n})\nexport class UtilsModule {\n  public static forRoot(configuration: any): ModuleWithProviders {\n    return {\n      ngModule: UtilsModule,\n      providers: [\n        { provide: 'FactorUtilsConfiguration', useValue: configuration }\n      ]\n    };\n  }\n}\n"]}