{"version":3,"sources":["ng://factor-utils/lib/files.service.ts","ng://factor-utils/lib/google-analytics.service.ts","ng://factor-utils/lib/google-analytics-error-handler.ts","ng://factor-utils/lib/google-tag-manager-error-handler.ts","ng://factor-utils/lib/google-tag-manager.service.ts","ng://factor-utils/lib/storage.service.ts","ng://factor-utils/lib/utils.module.ts"],"names":["FilesService","prototype","loadValue","files","_this","this","length","data_1","i","file","item","reader","FileReader","readAsDataURL","onload","push","Object","assign","data","result","callback","fileInput","value","open","options","accept","multiple","click","Injectable","args","providedIn","document","createElement","type","addEventListener","event","target","GoogleAnalyticsService","appendTrackingCode","trackingId","s1","async","src","head","appendChild","s2","innerHTML","initSubscribers","ex","console","error","router","events","subscribe","gtag","NavigationEnd","setTimeout","page_title","title","page_path","urlAfterRedirects","e","trackEvent","action","category","label","event_category","event_label","trackException","description","fatal","setUserId","userId","user_id","Router","GoogleAnalyticsErrorHandler","handleError","googleAnalyticsService","injector","get","HttpErrorResponse","navigator","onLine","message","JSON","stringify","url","status","location_1","LocationStrategy","stack","toString","PathLocationStrategy","path","Injector","GoogleTagManagerErrorHandler","window","dataLayer","gtm.errorMessage","gtm.errorUrl","error_status","GoogleTagManagerService","isPlatformBrowser","platformId","s3","width","height","style","display","visibility","prepend","addVariable","variable","decorators","Inject","PLATFORM_ID","StorageService","delete","key","storage","localStorage","memoryStorage","sessionStorage","parsedValue","parse","getValue","err","decrypt","undefined","configuration","encryptionSecret","CryptoJS.AES","CryptoJS.enc","Utf8","encrypt","set","valueEncrypted","UtilsModule","forRoot","ngModule","providers","provide","useValue","NgModule","declarations","imports","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from \"rxjs\";\n\ndeclare var document: any;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FilesService {\n  private callback: Function;\n  private fileInput: HTMLInputElement;\n  //private valueChangesSubject: BehaviorSubject<any[]> = new BehaviorSubject<any[]>(null);\n  //private valueChanges: Observable<any[]> = this.valueChangesSubject.asObservable();\n\n  constructor() {\n    this.fileInput = document.createElement('input');\n    //this.fileInput.style.display = 'none';\n    this.fileInput.type = 'file';\n    this.fileInput.addEventListener('change', (event: any) => {\n      const reader = new FileReader();\n      this.loadValue(event.target.files);\n    });\n  }\n  private loadValue(files) {\n    if (files && files.length > 0) {\n      let data: any[] = [];\n      for (let i = 0; i < files.length; i++) {\n        const file = files.item(i);\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = () => {\n          data.push(Object.assign(file, {\n            data: reader.result\n          }));\n          if (data.length == files.length) {\n            //this.valueChangesSubject.next(data.length > 0 ? data : null);\n            this.callback(data.length > 0 ? data : null);\n            this.fileInput.value = null;\n          }\n        };\n      }\n    }\n  }\n  public open(callback: Function, options: { accept?: string, multiple?: boolean }) {\n    this.fileInput.accept = options && options.accept ? options.accept : '';\n    this.fileInput.multiple = options && options.multiple;\n    this.fileInput.click();\n    this.callback = callback;\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { fromEvent } from 'rxjs';\n\ndeclare var gtag: Function;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GoogleAnalyticsService {\n  private trackingId: string;\n\n  constructor(\n    public router: Router\n  ) { }\n  public appendTrackingCode(trackingId: string) {\n    try {\n      if (trackingId) {\n        this.trackingId = trackingId;\n        const s1 = document.createElement('script');\n        s1.async = true;\n        s1.src = `https://www.googletagmanager.com/gtag/js?id=${trackingId}`;\n        document.head.appendChild(s1);\n        const s2 = document.createElement('script');\n        s2.innerHTML = `\n         window.dataLayer = window.dataLayer || [];\n         function gtag(){dataLayer.push(arguments);}\n         gtag('js', new Date());\n         gtag('config', '${trackingId}');\n       `;\n        document.head.appendChild(s2);\n        this.initSubscribers();\n      }\n    } catch (ex) {\n      console.error('Error appending google analytics');\n      console.error(ex);\n    }\n  }\n  private initSubscribers() {\n    this.router.events.subscribe(event => {\n      try {\n        if (typeof gtag === 'function') {\n          if (event instanceof NavigationEnd && this.trackingId) {\n            setTimeout(() => {\n              gtag('config', this.trackingId, {\n                'page_title': document.title,\n                'page_path': event.urlAfterRedirects\n              });\n            }, 100);\n          }\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n  public trackEvent(action: string, category: string = null, label: string = null, value: number = null) {\n    if (typeof gtag === 'function') {\n      gtag('event', action, {\n        event_category: category,\n        event_label: label,\n        value: value\n      });\n    }\n  }\n  public trackException(description: string, fatal: boolean) {\n    if (typeof gtag === 'function') {\n      gtag('event', 'exception', {\n        description: description,\n        fatal: fatal\n      });\n    }\n  }\n  public setUserId(userId: string) {\n    if (typeof gtag === 'function') {\n      gtag('set', { 'user_id': userId });\n    }\n  }\n}\n","import { ErrorHandler, Injectable, Injector } from '@angular/core';\nimport { LocationStrategy, PathLocationStrategy } from '@angular/common';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { GoogleAnalyticsService } from './google-analytics.service';\n\n@Injectable()\nexport class GoogleAnalyticsErrorHandler implements ErrorHandler {\n\n  constructor(\n    private injector: Injector\n  ) { }\n\n  handleError(error: Error |Â HttpErrorResponse) {\n    const googleAnalyticsService = this.injector.get(GoogleAnalyticsService);\n    if (error instanceof HttpErrorResponse) {\n      if (navigator.onLine) {\n        const message = error.error ? JSON.stringify(error.error) : error.message;\n        googleAnalyticsService.trackEvent(error.url, 'Http Error', `${error.status} - ${message}`);\n      }\n    } else {\n      const location = this.injector.get(LocationStrategy);\n      const message = error.message ? error.message : error.toString();\n      const stack = error.stack ? error.stack : error.toString();\n      const url = location instanceof PathLocationStrategy ? location.path() : '';\n      googleAnalyticsService.trackEvent(message, 'Javascript Error', stack);\n    }\n    throw error;\n  }\n}\n","import { ErrorHandler, Injectable, Injector } from '@angular/core';\nimport { LocationStrategy, PathLocationStrategy } from '@angular/common';\nimport { HttpErrorResponse } from '@angular/common/http';\n\ndeclare var window: any;\n\n@Injectable()\nexport class GoogleTagManagerErrorHandler implements ErrorHandler {\n\n  constructor(\n    private injector: Injector\n  ) { }\n\n  handleError(error: Error |Â HttpErrorResponse) {\n    if (error instanceof HttpErrorResponse) {\n      if (navigator.onLine) {\n        const message = error.error ? JSON.stringify(error.error) : error.message;\n        window.dataLayer = window.dataLayer || [];\n        window.dataLayer.push({\n          event: 'http_error',\n          'gtm.errorMessage': message,\n          'gtm.errorUrl': error.url,\n          'error_status': error.status\n        });\n      }\n    } /* else {\n      // DEPRECATED: Google Tag Manager automatically collect javascript errors this not neccesary now\n      const location = this.injector.get(LocationStrategy);\n      const message = error.message ? error.message : error.toString();\n      const stack = error.stack ? error.stack : error.toString();\n      const url = location instanceof PathLocationStrategy ? location.path() : '';\n      window.dataLayer = window.dataLayer || [];\n      window.dataLayer.push({\n        event: 'javascript_error',\n        'gtm.errorMessage': message,\n        'gtm.errorUrl': url,\n        'error_stack': stack,\n\n      });\n    }*/\n    throw error;\n  }\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport { HTMLElementExtended } from './html-element-extended';\n\ndeclare var window: any;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GoogleTagManagerService {\n  trackingId: string;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n  ) { }\n\n  public appendTrackingCode(trackingId: string): void {\n    try {\n      if (isPlatformBrowser(this.platformId) && trackingId) {\n        this.trackingId = trackingId;\n        const s1: HTMLElement = document.createElement('script');\n        s1.innerHTML = `\n          (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':\n          new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],\n          j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=\n          'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);\n          })(window,document,'script','dataLayer','${trackingId}');\n        `;\n        document.head.appendChild(s1);\n        const s2: HTMLElement = document.createElement('noscript');\n        const s3: HTMLIFrameElement = document.createElement('iframe');\n        s3.width = '0';\n        s3.height = '0';\n        s3.style.display = 'none';\n        s3.style.visibility = 'hidden';\n        s3.src = `https://www.googletagmanager.com/ns.html?id=${trackingId}`\n        s2.appendChild(s3);\n        (document.body as HTMLElementExtended).prepend(s2);\n      }\n    } catch (ex) {\n      console.error('Error appending google tag manager');\n      console.error(ex);\n    }\n  }\n  public addVariable(variable) {\n    window.dataLayer = window.dataLayer || [];\n    window.dataLayer.push(variable);\n  }\n}\n","import { Component, Inject, Injectable, OnInit, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport * as CryptoJS from 'crypto-js';\n\n// Only works on client storage\n@Injectable({\n  providedIn: 'root'\n})\nexport class StorageService {\n  memoryStorage: any;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    @Inject('FactorUtilsConfiguration') private configuration\n  ) { }\n\n  public delete(key: string, storage?) {\n    if (isPlatformBrowser(this.platformId)) {\n      if (!storage || typeof storage == 'string') {\n        switch (storage) {\n          case 'local':\n          case 'localStorage':\n            delete localStorage[key];\n            break;\n          case 'memory':\n            delete this.memoryStorage[key];\n            break;\n          default:\n            delete sessionStorage[key];\n            break;\n        }\n      } else if (typeof storage == 'object') {\n        delete storage[key];\n      }\n    }\n  }\n  public get(key: string, storage?): any {\n    let parsedValue: any;\n    if (isPlatformBrowser(this.platformId)) {\n      try {\n        parsedValue = JSON.parse(this.getValue(key, storage));\n      } catch (err) {\n        parsedValue = this.getValue(key, storage);\n      }\n    }\n    return parsedValue;\n  }\n  private getValue(key: string, storage?: any): any {\n    let value: any;\n    if (!storage || typeof storage == 'string') {\n      switch (storage) {\n        case 'local':\n        case 'localStorage':\n          value = localStorage[key];\n          break;\n        case 'memory':\n          value = this.memoryStorage[key];\n          break;\n        default:\n          value = sessionStorage[key];\n          break;\n      }\n    } else if (typeof storage == 'object') {\n      value = storage[key];\n    }\n    return this.decrypt(value);\n  }\n  private decrypt(value: string) {\n    if (value !== null &&\n      value !== undefined &&\n      value !== '' &&\n      this.configuration &&\n      this.configuration.storage &&\n      this.configuration.storage.encryptionSecret) {\n      const decryptedValue = CryptoJS.AES.decrypt(value, this.configuration.storage.encryptionSecret);\n      value = decryptedValue.toString(CryptoJS.enc.Utf8);\n    }\n    return value;\n  }\n  private encrypt(value: string) {\n    if (value !== null &&\n      value !== undefined &&\n      value !== '' &&\n      this.configuration &&\n      this.configuration.storage &&\n      this.configuration.storage.encryptionSecret) {\n      value = CryptoJS.AES.encrypt(value, this.configuration.storage.encryptionSecret);\n      return value.toString();\n    } else {\n      return value;\n    }\n\n  }\n  public set(key: string, value: any, storage?) {\n    if (isPlatformBrowser(this.platformId)) {\n      const valueEncrypted = this.encrypt(JSON.stringify(value));\n      if (!storage || typeof storage == 'string') {\n        switch (storage) {\n          case 'local':\n          case 'localStorage':\n            localStorage[key] = valueEncrypted;\n            break;\n          case 'memory':\n            this.memoryStorage[key] = valueEncrypted;\n            break;\n          default:\n            sessionStorage[key] = valueEncrypted;\n            break;\n        }\n      } else {\n        storage[key] = valueEncrypted;\n      }\n    }\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\n@NgModule({\n  declarations: [\n\n  ],\n  imports: [\n\n  ],\n  exports: [\n\n  ]\n})\nexport class UtilsModule {\n  public static forRoot(configuration: any): ModuleWithProviders {\n    return {\n      ngModule: UtilsModule,\n      providers: [\n        { provide: 'FactorUtilsConfiguration', useValue: configuration }\n      ]\n    };\n  }\n}\n"]}