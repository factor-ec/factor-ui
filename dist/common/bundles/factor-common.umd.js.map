{"version":3,"file":"factor-common.umd.js.map","sources":["ng://factor-common/lib/icon/icon.component.ts","ng://factor-common/lib/image/image.component.ts","ng://factor-common/lib/progress/progress.component.ts","ng://factor-common/lib/message/message.component.ts","ng://factor-common/lib/message.service.ts","ng://factor-common/lib/observe-intersecting.directive.ts","ng://factor-common/lib/common.module.ts"],"sourcesContent":["import { Component, OnInit, Input, Inject } from '@angular/core';\n\n@Component({\n  selector: 'ft-icon',\n  templateUrl: './icon.component.html',\n  styleUrls: ['./icon.component.scss']\n})\nexport class IconComponent implements OnInit {\n  @Input()\n  name: string;\n  @Input()\n  collection: string;\n  @Input()\n  path: string;\n\n  constructor(\n    @Inject('FactorCommonConfiguration') private configuration\n  ) { }\n\n  ngOnInit() {\n    if (!this.collection) {\n      if (this.configuration.icon && this.configuration.icon.collection) {\n        this.collection = this.configuration.icon.collection;\n      } else {\n        this.collection = 'icons';\n      }\n    }\n    if (!this.path) {\n      if (this.configuration.icon && this.configuration.icon.path) {\n        this.path = this.configuration.icon.path;\n      } else {\n        this.path = 'assets';\n      }\n    }\n  }\n}\n","import { Component, OnInit, Input, HostBinding, ElementRef } from '@angular/core';\n\n@Component({\n  selector: 'ft-image',\n  templateUrl: './image.component.html',\n  styleUrls: ['./image.component.scss']\n})\nexport class ImageComponent implements OnInit {\n  @HostBinding('class.error')\n  error: boolean;\n  @HostBinding('class.loading')\n  loading: boolean;\n  @Input()\n  src: string;\n  shown: boolean;\n\n  constructor(\n    private element: ElementRef\n  ) { }\n\n  ngOnInit() {\n    if (\"IntersectionObserver\" in window) {\n      let elementObserver = new IntersectionObserver((entries, observer) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            let image = new Image();\n            image.src = this.src;\n            setTimeout(() => {\n              this.loading = true;\n            }, 100);\n            image.onerror = () => {\n              this.error = true;\n              this.loading = false;\n            };\n            image.onload = () => {\n              if (\"decode\" in image) {\n                image.decode().then(() => {\n                  this.loading = false;\n                  this.shown = true;\n                });\n              } else {\n                console.error('Image.decode not available.');\n              }\n            };\n            elementObserver.unobserve(this.element.nativeElement);\n          }\n        });\n      }, {\n        rootMargin: \"0px 0px 200px 0px\"\n      });\n      elementObserver.observe(this.element.nativeElement);\n    } else {\n      console.error('IntersectionObserver not available.');\n      this.shown = true;\n    }\n  }\n\n}\n","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'ft-progress',\n  templateUrl: './progress.component.html',\n  styleUrls: ['./progress.component.scss']\n})\nexport class ProgressComponent implements OnInit {\n  @Input()\n  color: string;\n  @Input()\n  mode: 'determinate' | 'indeterminate' = 'indeterminate';\n  @Input()\n  size: number;\n  @Input()\n  value: number;\n\n  constructor() { }\n\n  ngOnInit() {\n    this.color = 'var(--primary)';\n    this.value = 0;\n  }\n\n}\n","import { Component, EventEmitter, HostBinding, Inject, Input, OnInit, Output } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  selector: 'ft-message',\n  templateUrl: './message.component.html',\n  styleUrls: ['./message.component.scss']\n})\nexport class MessageComponent implements OnInit {\n  @Output()\n  beforeSelect: EventEmitter<any> = new EventEmitter();\n\n  constructor(\n    public dialogRef: MatDialogRef<MessageComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) { }\n\n  ngOnInit() {\n  }\n  select(value) {\n    this.beforeSelect.emit(value);\n  }\n\n\n}\n","import { Injectable } from '@angular/core';\nimport { ReplaySubject, Observable, of } from \"rxjs\";\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatDialog } from '@angular/material/dialog';\n\nimport { MessageComponent } from './message/message.component';\n\nexport interface Action {\n  label: string;\n  value: any;\n  color?: string;\n}\nexport interface Options {\n  type?: 'modal' | 'notification';\n  actions?: Action[];\n  duration?: number;\n  title?: string;\n  width?: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MessageService {\n  element: any;\n\n  constructor(\n    private snackBar: MatSnackBar,\n    private dialog: MatDialog\n  ) { }\n\n  show(message: string, options?: Options): Observable<any> {\n    let selectionSource: ReplaySubject<string> = new ReplaySubject<string>(null);\n    let selection: Observable<string> = selectionSource.asObservable();\n    const defaults: any = {\n      type: null,\n      duration: 2000\n    };\n    options = Object.assign(defaults, options);\n    switch (options.type) {\n      default:\n      case 'notification':\n        this.snackBar.open(message, '', {\n          duration: options.duration || 2000,\n        });\n        break;\n      case 'modal':\n        const dialogRef = this.dialog.open(MessageComponent, {\n          width: options.width || '250px',\n          data: { message, options },\n          autoFocus: false,\n          disableClose: true\n        });\n        dialogRef.componentInstance.beforeSelect.subscribe(response => {\n          selectionSource.next(response);\n          dialogRef.close();\n        });\n        this.snackBar.dismiss();\n        break;\n    }\n    return selection;\n  }\n}\n","import { Directive, EventEmitter, HostListener, OnInit, Output, Input, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[ftObserveIntersecting]'\n})\nexport class ObserveIntersectingDirective implements OnInit {\n  @Input('ftObserveIntersectingOptions')\n  options: { root: any, rootMargin: any, threshold: any };\n  @Output('ftObserveIntersecting')\n  event: EventEmitter<boolean> = new EventEmitter();\n\n  constructor(\n    private element: ElementRef\n  ) { }\n\n  ngOnInit() {\n    if (\"IntersectionObserver\" in window) {\n      const elementObserver = new IntersectionObserver((entries, observer) => {\n        entries.forEach((entry) => {\n          this.event.emit(entry.isIntersecting);\n        });\n      }, this.options);\n      elementObserver.observe(this.element.nativeElement);\n    } else {\n      console.error('ftObserveIntersecting not available in this browser.');\n    }\n  }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule as AngularCommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\n\nimport { IconComponent } from './icon/icon.component';\nimport { ImageComponent } from './image/image.component';\nimport { ProgressComponent } from './progress/progress.component';\nimport { ObserveIntersectingDirective } from './observe-intersecting.directive';\nimport { MessageComponent } from './message/message.component';\n\n@NgModule({\n  declarations: [\n    IconComponent,\n    ImageComponent,\n    ProgressComponent,\n    ObserveIntersectingDirective,\n    MessageComponent\n  ],\n  imports: [\n    AngularCommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    MatSnackBarModule\n  ],\n  exports: [\n    IconComponent,\n    ImageComponent,\n    ProgressComponent,\n    ObserveIntersectingDirective\n  ],\n  entryComponents: [\n    MessageComponent\n  ]\n})\nexport class CommonModule {\n  public static forRoot(configuration: any): ModuleWithProviders {\n    return {\n      ngModule: CommonModule,\n      providers: [\n        { provide: 'FactorCommonConfiguration', useValue: configuration }\n      ]\n    };\n  }\n}\n"],"names":["Component","Inject","Input","ElementRef","HostBinding","EventEmitter","MatDialogRef","MAT_DIALOG_DATA","Output","ReplaySubject","Injectable","MatSnackBar","MatDialog","Directive","NgModule","AngularCommonModule","MatButtonModule","MatDialogModule","MatSnackBarModule"],"mappings":"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"}
