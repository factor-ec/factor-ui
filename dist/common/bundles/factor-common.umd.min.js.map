{"version":3,"sources":["ng://factor-common/lib/icon/icon.component.ts","ng://factor-common/lib/image/image.component.ts","ng://factor-common/lib/progress/progress.component.ts","ng://factor-common/lib/message.service.ts","ng://factor-common/lib/ripple.directive.ts","ng://factor-common/lib/observe-intersecting.directive.ts","ng://factor-common/lib/common.module.ts"],"names":["IconComponent","configuration","this","prototype","ngOnInit","collection","icon","path","Component","args","selector","template","Inject","Input","ImageComponent","element","_this","window","elementObserver_1","IntersectionObserver","entries","observer","forEach","entry","isIntersecting","image_1","Image","src","setTimeout","loading","onerror","error","onload","decode","then","shown","console","unobserve","nativeElement","rootMargin","observe","ElementRef","HostBinding","ProgressComponent","color","mode","value","MessageService","show","content","options","document","createElement","type","classList","add","style","innerHTML","body","appendChild","$","toast","modal","Injectable","providedIn","RippleDirective","elementRef","showRipple","event","ripple","querySelector","eventType","insertBefore","firstChild","offsetHeight","offsetWidth","size","Math","max","width","height","className","replace","x","pageX","y","pageY","originalEvent","changedTouches","e","offsets","getPosition","left","top","de","documentElement","box","getBoundingClientRect","pageYOffset","clientTop","pageXOffset","clientLeft","Directive","HostListener","ObserveIntersectingDirective","EventEmitter","emit","Output","CommonModule","forRoot","ngModule","providers","provide","useValue","NgModule","declarations","imports","AngularCommonModule","exports"],"mappings":"mUAAA,IAAAA,EAAA,WAeE,SAAAA,EAC+CC,GAAAC,KAAAD,cAAAA,EAmBjD,OAhBED,EAAAG,UAAAC,SAAA,WACOF,KAAKG,aACJH,KAAKD,cAAcK,MAAQJ,KAAKD,cAAcK,KAAKD,WACrDH,KAAKG,WAAaH,KAAKD,cAAcK,KAAKD,WAE1CH,KAAKG,WAAa,SAGjBH,KAAKK,OACJL,KAAKD,cAAcK,MAAQJ,KAAKD,cAAcK,KAAKC,KACrDL,KAAKK,KAAOL,KAAKD,cAAcK,KAAKC,KAEpCL,KAAKK,KAAO,+BA7BnBC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,UACVC,SAAA,6lBAYGC,EAAAA,OAAMH,KAAA,CAAC,gEARTI,EAAAA,0BAEAA,EAAAA,oBAEAA,EAAAA,SAuBHb,EAnCA,GCAAc,EAAA,WAgBE,SAAAA,EACUC,GAAAb,KAAAa,QAAAA,EAwCZ,OArCED,EAAAX,UAAAC,SAAA,WAAA,IAAAY,EAAAd,KACE,GAAI,yBAA0Be,OAAQ,KAChCC,EAAkB,IAAIC,qBAAoB,SAAEC,EAASC,GACvDD,EAAQE,QAAO,SAAEC,GACf,GAAIA,EAAMC,eAAgB,KACpBC,EAAQ,IAAIC,MAChBD,EAAME,IAAMX,EAAKW,IACjBC,WAAU,WACRZ,EAAKa,SAAU,GACd,KACHJ,EAAMK,QAAO,WACXd,EAAKe,OAAQ,EACbf,EAAKa,SAAU,GAEjBJ,EAAMO,OAAM,WACN,WAAYP,EACdA,EAAMQ,SAASC,KAAI,WACjBlB,EAAKa,SAAU,EACfb,EAAKmB,OAAQ,IAGfC,QAAQL,MAAM,gCAGlBb,EAAgBmB,UAAUrB,EAAKD,QAAQuB,mBAG1C,CACDC,WAAY,sBAEdrB,EAAgBsB,QAAQtC,KAAKa,QAAQuB,oBAErCF,QAAQL,MAAM,uCACd7B,KAAKiC,OAAQ,uBAnDlB3B,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,WACVC,SAAA,klCAJ8C8B,EAAAA,6CAQ7CC,EAAAA,YAAWjC,KAAA,CAAC,gCAEZiC,EAAAA,YAAWjC,KAAA,CAAC,8BAEZI,EAAAA,SA6CHC,EAzDA,GCAA6B,EAAA,WAeE,SAAAA,IANAzC,KAAA0C,MAAgB,iBAEhB1C,KAAA2C,KAAwC,gBAExC3C,KAAA4C,MAAgB,EAOlB,OAHEH,EAAAxC,UAAAC,SAAA,iCAfDI,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,cACVC,SAAA,gxCAICE,EAAAA,oBAEAA,EAAAA,qBAEAA,EAAAA,SAQH8B,EApBA,GCAAI,EAAA,WAeE,SAAAA,YAEAA,EAAA5C,UAAA6C,KAAA,SAAKC,EAASC,GAKZ,OAJIhD,KAAKa,QAGTb,KAAKa,QAAUoC,SAASC,cAAc,OAC9BF,EAAQG,MACd,IAAK,QACHnD,KAAKa,QAAQuC,UAAUC,IAAI,QAAS,QACpCrD,KAAKa,QAAQyC,MAAQ,wEACrBtD,KAAKa,QAAQ0C,UAAY,yCACKR,EAAO,qBAErCE,SAASO,KAAKC,YAAYzD,KAAKa,SAC/B6C,EAAE1D,KAAKa,SAAS8C,MAAM,QACtB,MACF,QACE3D,KAAKa,QAAQuC,UAAUC,IAAI,QAAS,QACpCrD,KAAKa,QAAQ0C,UAAY,sJAGSR,EAAO,4QAOzCE,SAASO,KAAKC,YAAYzD,KAAKa,SAC/B6C,EAAE1D,KAAKa,SAAS+C,8BApCvBC,EAAAA,WAAUtD,KAAA,CAAC,CACVuD,WAAY,sJAVd,GCAAC,EAAA,WAWE,SAAAA,EACUC,GAAAhE,KAAAgE,WAAAA,EAgEZ,OA3DED,EAAA9D,UAAAgE,WAFA,SAEWC,OAELrD,EAAUb,KAAKgE,WAAW5B,cAC1B+B,EAAStD,EAAQuD,cAAc,WAC7BC,EAAYH,EAAMf,KAsBxB,GApBe,OAAXgB,KAEFA,EAASlB,SAASC,cAAc,SACzBE,UAAUC,IAAI,UAGrBxC,EAAQyD,aAAaH,EAAQtD,EAAQ0D,YAGhCJ,EAAOK,cAAiBL,EAAOM,cAClCzE,KAAK0E,KAAOC,KAAKC,IAAI/D,EAAQ4D,YAAa5D,EAAQ2D,cAClDL,EAAOb,MAAMuB,MAAQ7E,KAAK0E,KAAO,KACjCP,EAAOb,MAAMwB,OAAS9E,KAAK0E,KAAO,OAKtCP,EAAOY,UAAYZ,EAAOY,UAAUC,QAAQ,sBAAuB,IAGjD,cAAdX,EACFrE,KAAKiF,EAAIf,EAAMgB,MACflF,KAAKmF,EAAIjB,EAAMkB,WACV,GAAkB,eAAdf,EACT,QACMgB,OAAa,EAEfA,EADkC,oBAAzBnB,EAAMoB,eACCpB,EAAMoB,eAAe,GAErBpB,EAAMmB,cAExBrF,KAAKiF,EAAII,EAAcH,MACvBlF,KAAKmF,EAAIE,EAAcD,MACvB,MAAOG,GAEPvF,KAAKiF,EAAId,EAAOM,YAAc,EAC9BzE,KAAKmF,EAAIhB,EAAOK,aAAe,EAGnCxE,KAAKwF,QAAUxF,KAAKyF,YAAY5E,GAChCsD,EAAOb,MAAMoC,KAAQ1F,KAAKiF,EAAIjF,KAAKwF,QAAQE,KAAO1F,KAAK0E,KAAO,EAAK,KACnEP,EAAOb,MAAMqC,IAAO3F,KAAKmF,EAAInF,KAAKwF,QAAQG,IAAM3F,KAAK0E,KAAO,EAAK,KAGjEP,EAAOf,UAAUC,IAAI,mBAEvBU,EAAA9D,UAAAwF,YAAA,SAAY5E,OACJ+E,EAAK3C,SAAS4C,gBACdC,EAAMjF,EAAQkF,wBAGpB,MAAO,CAAEJ,IAFGG,EAAIH,IAAM5E,OAAOiF,YAAcJ,EAAGK,UAE3BP,KADNI,EAAIJ,KAAO3E,OAAOmF,YAAcN,EAAGO,iCAvEnDC,EAAAA,UAAS7F,KAAA,CAAC,CACTC,SAAU,0DAHQ+B,EAAAA,kDAejB8D,EAAAA,aAAY9F,KAAA,CAAC,YAAa,CAAC,YAAS,CAAA4C,KACpCkD,EAAAA,aAAY9F,KAAA,CAAC,aAAc,CAAC,cA4D/BwD,EA5EA,GCAAuC,EAAA,WAWE,SAAAA,EACUzF,GAAAb,KAAAa,QAAAA,EAHVb,KAAAkE,MAA+B,IAAIqC,EAAAA,aAmBrC,OAbED,EAAArG,UAAAC,SAAA,WAAA,IAAAY,EAAAd,KACM,yBAA0Be,OACJ,IAAIE,qBAAoB,SAAEC,EAASC,GACzDD,EAAQE,QAAO,SAAEC,GACfP,EAAKoD,MAAMsC,KAAKnF,EAAMC,mBAEvBtB,KAAKgD,SACQV,QAAQtC,KAAKa,QAAQuB,eAErCF,QAAQL,MAAM,6EAtBnBuE,EAAAA,UAAS7F,KAAA,CAAC,CACTC,SAAU,uEAH2D+B,EAAAA,+CAMpE5B,EAAAA,MAAKJ,KAAA,CAAC,+CAENkG,EAAAA,OAAMlG,KAAA,CAAC,4BAoBV+F,EA5BA,GCAAI,EAAA,WAQA,SAAAA,KA4BA,OARgBA,EAAAC,QAAd,SAAsB5G,GACpB,MAAO,CACL6G,SAAUF,EACVG,UAAW,CACT,CAAEC,QAAS,4BAA6BC,SAAUhH,0BAxBzDiH,EAAAA,SAAQzG,KAAA,CAAC,CACR0G,aAAc,CACZnH,EACAc,EACAmD,EACAtB,EACA6D,GAEFY,QAAS,CACPC,EAAAA,cAEFC,QAAS,CACPtH,EACAc,EACAmD,EACAtB,EACA6D,OAYJI,EApCA","sourcesContent":["import { Component, OnInit, Input, Inject } from '@angular/core';\n\n@Component({\n  selector: 'ft-icon',\n  templateUrl: './icon.component.html',\n  styleUrls: ['./icon.component.scss']\n})\nexport class IconComponent implements OnInit {\n  @Input()\n  name: string;\n  @Input()\n  collection: string;\n  @Input()\n  path: string;\n\n  constructor(\n    @Inject('FactorCommonConfiguration') private configuration\n  ) { }\n\n  ngOnInit() {\n    if (!this.collection) {\n      if (this.configuration.icon && this.configuration.icon.collection) {\n        this.collection = this.configuration.icon.collection;\n      } else {\n        this.collection = 'icons';\n      }\n    }\n    if (!this.path) {\n      if (this.configuration.icon && this.configuration.icon.path) {\n        this.path = this.configuration.icon.path;\n      } else {\n        this.path = 'assets';\n      }\n    }\n  }\n}\n","import { Component, OnInit, Input, HostBinding, ElementRef } from '@angular/core';\n\n@Component({\n  selector: 'ft-image',\n  templateUrl: './image.component.html',\n  styleUrls: ['./image.component.scss']\n})\nexport class ImageComponent implements OnInit {\n  @HostBinding('class.error')\n  error: boolean;\n  @HostBinding('class.loading')\n  loading: boolean;\n  @Input()\n  src: string;\n  shown: boolean;\n\n  constructor(\n    private element: ElementRef\n  ) { }\n\n  ngOnInit() {\n    if (\"IntersectionObserver\" in window) {\n      let elementObserver = new IntersectionObserver((entries, observer) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            let image = new Image();\n            image.src = this.src;\n            setTimeout(() => {\n              this.loading = true;\n            }, 100);\n            image.onerror = () => {\n              this.error = true;\n              this.loading = false;\n            };\n            image.onload = () => {\n              if (\"decode\" in image) {\n                image.decode().then(() => {\n                  this.loading = false;\n                  this.shown = true;\n                });\n              } else {\n                console.error('Image.decode not available.');\n              }\n            };\n            elementObserver.unobserve(this.element.nativeElement);\n          }\n        });\n      }, {\n        rootMargin: \"0px 0px 200px 0px\"\n      });\n      elementObserver.observe(this.element.nativeElement);\n    } else {\n      console.error('IntersectionObserver not available.');\n      this.shown = true;\n    }\n  }\n\n}\n","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'ft-progress',\n  templateUrl: './progress.component.html',\n  styleUrls: ['./progress.component.scss']\n})\nexport class ProgressComponent implements OnInit {\n  @Input()\n  color: string = 'var(--primary)';\n  @Input()\n  mode: 'determinate' | 'indeterminate' = 'indeterminate';\n  @Input()\n  value: number = 0;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\ndeclare var $: any;\n\nexport interface Options {\n  type?: string,\n  actions?: any[]\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MessageService {\n  element: any;\n\n  constructor() { }\n\n  show(content, options?: Options) {\n    if (this.element) {\n\n    }\n    this.element = document.createElement('div');\n    switch (options.type) {\n      case 'toast':\n        this.element.classList.add('toast', 'fade');\n        this.element.style = 'position: fixed; bottom: 2rem; left: 2rem; right: 2rem; margin: auto;';\n        this.element.innerHTML = `\n            <div class=\"toast-body\">${content}</div>\n          `;\n        document.body.appendChild(this.element);\n        $(this.element).toast('show');\n        break;\n      default:\n        this.element.classList.add('modal', 'fade');\n        this.element.innerHTML = `\n            <div class=\"modal-dialog modal-dialog-centered\">\n              <div class=\"modal-content\">\n                <div class=\"modal-body\">${content}</div>\n                <div class=\"modal-footer\" style=\"padding-top: 0; border: 0;\">\n                  <button type=\"button\" class=\"btn btn-primary\" data-dismiss=\"modal\">Accept</button>\n                </div>\n              </div>\n            </div>\n          `;\n        document.body.appendChild(this.element);\n        $(this.element).modal();\n        break;\n    }\n  }\n}\n","import { Directive, ElementRef, HostListener } from '@angular/core';\n\n@Directive({\n  selector: '[ftRipple]'\n})\nexport class RippleDirective {\n  x: number;\n  y: number;\n  size: number;\n  offsets: any;\n\n  constructor(\n    private elementRef: ElementRef\n  ) { }\n\n  @HostListener('mousedown', ['$event'])\n  @HostListener('touchstart', ['$event'])\n  showRipple(event) {\n\n    let element = this.elementRef.nativeElement;\n    let ripple = element.querySelector('.ripple');\n    const eventType = event.type;\n    // Ripple\n    if (ripple === null) {\n      // Create ripple\n      ripple = document.createElement('span');\n      ripple.classList.add('ripple');\n\n      // Prepend ripple to element\n      element.insertBefore(ripple, element.firstChild);\n\n      // Set ripple this.size\n      if (!ripple.offsetHeight && !ripple.offsetWidth) {\n        this.size = Math.max(element.offsetWidth, element.offsetHeight);\n        ripple.style.width = this.size + 'px';\n        ripple.style.height = this.size + 'px';\n      }\n    }\n\n    // Remove animation effect\n    ripple.className = ripple.className.replace(/ ?(ripple-animate)/g, '');\n\n    // get click coordinates by event type\n    if (eventType === 'mousedown') {\n      this.x = event.pageX;\n      this.y = event.pageY;\n    } else if (eventType === 'touchstart') {\n      try {\n        let originalEvent;\n        if (typeof event.changedTouches !== 'undefined') {\n          originalEvent = event.changedTouches[0];\n        } else {\n          originalEvent = event.originalEvent;\n        }\n        this.x = originalEvent.pageX;\n        this.y = originalEvent.pageY;\n      } catch (e) {\n        // fall back to center of el\n        this.x = ripple.offsetWidth / 2;\n        this.y = ripple.offsetHeight / 2;\n      }\n    }\n    this.offsets = this.getPosition(element);\n    ripple.style.left = (this.x - this.offsets.left - this.size / 2) + 'px';\n    ripple.style.top = (this.y - this.offsets.top - this.size / 2) + 'px';\n\n    // Add animation effect\n    ripple.classList.add('ripple-animate');\n  }\n  getPosition(element) {\n    const de = document.documentElement;\n    const box = element.getBoundingClientRect();\n    const top = box.top + window.pageYOffset - de.clientTop;\n    const left = box.left + window.pageXOffset - de.clientLeft;\n    return { top: top, left: left };\n  }\n}\n","import { Directive, EventEmitter, HostListener, OnInit, Output, Input, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[ftObserveIntersecting]'\n})\nexport class ObserveIntersectingDirective implements OnInit {\n  @Input('ftObserveIntersectingOptions')\n  options: { root: any, rootMargin: any, threshold: any };\n  @Output('ftObserveIntersecting')\n  event: EventEmitter<boolean> = new EventEmitter();\n\n  constructor(\n    private element: ElementRef\n  ) { }\n\n  ngOnInit() {\n    if (\"IntersectionObserver\" in window) {\n      const elementObserver = new IntersectionObserver((entries, observer) => {\n        entries.forEach((entry) => {\n          this.event.emit(entry.isIntersecting);\n        });\n      }, this.options);\n      elementObserver.observe(this.element.nativeElement);\n    } else {\n      console.error('ftObserveIntersecting not available in this browser.');\n    }\n  }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule as AngularCommonModule } from '@angular/common';\nimport { IconComponent } from './icon/icon.component';\nimport { ImageComponent } from './image/image.component';\nimport { RippleDirective } from './ripple.directive';\nimport { ProgressComponent } from './progress/progress.component';\nimport { ObserveIntersectingDirective } from './observe-intersecting.directive';\n\n@NgModule({\n  declarations: [\n    IconComponent,\n    ImageComponent,\n    RippleDirective,\n    ProgressComponent,\n    ObserveIntersectingDirective\n  ],\n  imports: [\n    AngularCommonModule\n  ],\n  exports: [\n    IconComponent,\n    ImageComponent,\n    RippleDirective,\n    ProgressComponent,\n    ObserveIntersectingDirective\n  ]\n})\nexport class CommonModule {\n  public static forRoot(configuration: any): ModuleWithProviders {\n    return {\n      ngModule: CommonModule,\n      providers: [\n        { provide: 'FactorCommonConfiguration', useValue: configuration }\n      ]\n    };\n  }\n}\n"]}