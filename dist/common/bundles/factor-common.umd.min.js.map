{"version":3,"sources":["ng://factor-common/lib/icon/icon.component.ts","ng://factor-common/lib/image/image.component.ts","ng://factor-common/lib/progress/progress.component.ts","ng://factor-common/lib/message/message.component.ts","ng://factor-common/lib/message.service.ts","ng://factor-common/lib/observe-intersecting.directive.ts","ng://factor-common/lib/common.module.ts"],"names":["IconComponent","prototype","ngOnInit","this","collection","configuration","icon","path","Component","args","selector","template","Inject","Input","ImageComponent","_this","window","elementObserver_1","IntersectionObserver","entries","observer","forEach","entry","isIntersecting","image_1","Image","src","setTimeout","loading","onerror","error","onload","decode","then","shown","console","unobserve","element","nativeElement","rootMargin","observe","ElementRef","HostBinding","ProgressComponent","color","mode","value","MessageComponent","Object","defineProperty","join","MatDialogRef","MAT_DIALOG_DATA","dialogRef","data","MessageService","show","message","options","assign","type","duration","snackBar","open","dialog","width","disableClose","dismiss","of","Injectable","providedIn","MatSnackBar","MatDialog","ObserveIntersectingDirective","event","emit","Directive","Output","EventEmitter","CommonModule","forRoot","ngModule","providers","provide","useValue","NgModule","declarations","imports","AngularCommonModule","MatButtonModule","MatDialogModule","MatSnackBarModule","exports","entryComponents"],"mappings":"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","sourcesContent":["import { Component, OnInit, Input, Inject } from '@angular/core';\n\n@Component({\n  selector: 'ft-icon',\n  templateUrl: './icon.component.html',\n  styleUrls: ['./icon.component.scss']\n})\nexport class IconComponent implements OnInit {\n  @Input()\n  name: string;\n  @Input()\n  collection: string;\n  @Input()\n  path: string;\n\n  constructor(\n    @Inject('FactorCommonConfiguration') private configuration\n  ) { }\n\n  ngOnInit() {\n    if (!this.collection) {\n      if (this.configuration.icon && this.configuration.icon.collection) {\n        this.collection = this.configuration.icon.collection;\n      } else {\n        this.collection = 'icons';\n      }\n    }\n    if (!this.path) {\n      if (this.configuration.icon && this.configuration.icon.path) {\n        this.path = this.configuration.icon.path;\n      } else {\n        this.path = 'assets';\n      }\n    }\n  }\n}\n","import { Component, OnInit, Input, HostBinding, ElementRef } from '@angular/core';\n\n@Component({\n  selector: 'ft-image',\n  templateUrl: './image.component.html',\n  styleUrls: ['./image.component.scss']\n})\nexport class ImageComponent implements OnInit {\n  @HostBinding('class.error')\n  error: boolean;\n  @HostBinding('class.loading')\n  loading: boolean;\n  @Input()\n  src: string;\n  shown: boolean;\n\n  constructor(\n    private element: ElementRef\n  ) { }\n\n  ngOnInit() {\n    if (\"IntersectionObserver\" in window) {\n      let elementObserver = new IntersectionObserver((entries, observer) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            let image = new Image();\n            image.src = this.src;\n            setTimeout(() => {\n              this.loading = true;\n            }, 100);\n            image.onerror = () => {\n              this.error = true;\n              this.loading = false;\n            };\n            image.onload = () => {\n              if (\"decode\" in image) {\n                image.decode().then(() => {\n                  this.loading = false;\n                  this.shown = true;\n                });\n              } else {\n                console.error('Image.decode not available.');\n              }\n            };\n            elementObserver.unobserve(this.element.nativeElement);\n          }\n        });\n      }, {\n        rootMargin: \"0px 0px 200px 0px\"\n      });\n      elementObserver.observe(this.element.nativeElement);\n    } else {\n      console.error('IntersectionObserver not available.');\n      this.shown = true;\n    }\n  }\n\n}\n","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'ft-progress',\n  templateUrl: './progress.component.html',\n  styleUrls: ['./progress.component.scss']\n})\nexport class ProgressComponent implements OnInit {\n  @Input()\n  color: string = 'var(--primary)';\n  @Input()\n  mode: 'determinate' | 'indeterminate' = 'indeterminate';\n  @Input()\n  value: number = 0;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Component, HostBinding, Inject, Input, OnInit } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  selector: 'ft-message',\n  templateUrl: './message.component.html',\n  styleUrls: ['./message.component.scss']\n})\nexport class MessageComponent implements OnInit {\n  constructor(\n    public dialogRef: MatDialogRef<MessageComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) { }\n\n  ngOnInit() {\n  }\n  @HostBinding('class')\n  get hostClasses(): string {\n    return [\n    ].join(' ');\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatDialog } from '@angular/material/dialog';\n\nimport { MessageComponent } from './message/message.component';\n\nexport interface Action {\n  label: string;\n  value: any;\n}\nexport interface Options {\n  type?: 'modal' | 'notification';\n  actions?: Action[];\n  duration?: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MessageService {\n  element: any;\n\n  constructor(\n    private snackBar: MatSnackBar,\n    private dialog: MatDialog\n  ) { }\n\n  show(message: string, options?: Options): Observable<any> {\n    const defaults: any = {\n      type: null,\n      duration: 2000\n    };\n    options = Object.assign(defaults, options);\n    switch (options.type) {\n      default:\n      case 'notification':\n        this.snackBar.open(message, '', {\n          duration: options.duration || 2000,\n        });\n        break;\n      case 'modal':\n        const dialogRef = this.dialog.open(MessageComponent, {\n          width: '250px',\n          data: { message, options },\n          disableClose: true\n        });\n        this.snackBar.dismiss();\n        break;\n    }\n    return of(null);\n  }\n}\n","import { Directive, EventEmitter, HostListener, OnInit, Output, Input, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[ftObserveIntersecting]'\n})\nexport class ObserveIntersectingDirective implements OnInit {\n  @Input('ftObserveIntersectingOptions')\n  options: { root: any, rootMargin: any, threshold: any };\n  @Output('ftObserveIntersecting')\n  event: EventEmitter<boolean> = new EventEmitter();\n\n  constructor(\n    private element: ElementRef\n  ) { }\n\n  ngOnInit() {\n    if (\"IntersectionObserver\" in window) {\n      const elementObserver = new IntersectionObserver((entries, observer) => {\n        entries.forEach((entry) => {\n          this.event.emit(entry.isIntersecting);\n        });\n      }, this.options);\n      elementObserver.observe(this.element.nativeElement);\n    } else {\n      console.error('ftObserveIntersecting not available in this browser.');\n    }\n  }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule as AngularCommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\n\nimport { IconComponent } from './icon/icon.component';\nimport { ImageComponent } from './image/image.component';\nimport { ProgressComponent } from './progress/progress.component';\nimport { ObserveIntersectingDirective } from './observe-intersecting.directive';\nimport { MessageComponent } from './message/message.component';\n\n@NgModule({\n  declarations: [\n    IconComponent,\n    ImageComponent,\n    ProgressComponent,\n    ObserveIntersectingDirective,\n    MessageComponent\n  ],\n  imports: [\n    AngularCommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    MatSnackBarModule\n  ],\n  exports: [\n    IconComponent,\n    ImageComponent,\n    ProgressComponent,\n    ObserveIntersectingDirective\n  ],\n  entryComponents: [\n    MessageComponent\n  ]\n})\nexport class CommonModule {\n  public static forRoot(configuration: any): ModuleWithProviders {\n    return {\n      ngModule: CommonModule,\n      providers: [\n        { provide: 'FactorCommonConfiguration', useValue: configuration }\n      ]\n    };\n  }\n}\n"]}