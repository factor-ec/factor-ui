{"version":3,"sources":["ng://factor-common/lib/color.service.ts","ng://factor-common/lib/avatar/avatar.component.ts","ng://factor-common/lib/icon/icon.component.ts","ng://factor-common/lib/image/image.component.ts","ng://factor-common/lib/observe-intersecting.directive.ts","ng://factor-common/lib/progress/progress.component.ts","ng://factor-common/lib/common.module.ts"],"names":["ColorService","prototype","hash","str","maxSafeInteger","Math","round","i","length","charCodeAt","rgb2hex","RGBArray","hex","forEach","value","toString","hsl2rgb","H","S","L","q","p","map","color","hsl","this","hueRanges","range","max","min","rgb","Injectable","args","providedIn","options","LS","lightness","saturation","param","Array","isArray","concat","hue","AvatarComponent","Object","defineProperty","_this","trim","_src","image_1","Image","src","onload","decode","then","loaded","console","error","_label","initials","getInitials","colorService","ngOnInit","allInitials","match","shift","pop","toUpperCase","Component","selector","template","Input","HostBinding","IconComponent","collection","configuration","icon","path","Inject","ImageComponent","window","elementObserver_1","IntersectionObserver","entries","observer","entry","isIntersecting","setTimeout","loading","onerror","shown","unobserve","element","nativeElement","rootMargin","observe","ElementRef","ObserveIntersectingDirective","event","emit","Directive","Output","EventEmitter","ProgressComponent","mode","CommonModule","forRoot","ngModule","providers","provide","useValue","NgModule","declarations","imports","AngularCommonModule","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ColorService {\n  L: number[];\n  S: number[];\n  hueRanges: {min: number, max: number}[];\n\n  constructor() {\n    const options: any = {};\n    let LS = [options.lightness, options.saturation].map(function(param) {\n      param = param || [0.35, 0.5, 0.65]; // note that 3 is a prime\n      return Array.isArray(param) ? param.concat() : [param];\n    });\n\n    this.L = LS[0];\n    this.S = LS[1];\n\n    if (typeof options.hue === 'number') {\n      options.hue = { min: options.hue, max: options.hue };\n    }\n    if (typeof options.hue === 'object' && !Array.isArray(options.hue)) {\n      options.hue = [options.hue];\n    }\n    if (typeof options.hue === 'undefined') {\n      options.hue = [];\n    }\n    this.hueRanges = options.hue.map(function(range) {\n      return {\n        min: typeof range.min === 'undefined' ? 0 : range.min,\n        max: typeof range.max === 'undefined' ? 360 : range.max\n      };\n    });\n  }\n\n  /**\n   * BKDR Hash (modified version)\n   *\n   * @param str string to hash\n   */\n  hash(str: string): number {\n    let seed = 131;\n    let seed2 = 137;\n    let hash = 0;\n    // make hash more sensitive for short string like 'a', 'b', 'c'\n    str += 'x';\n    // Note: Number.MAX_SAFE_INTEGER equals 9007199254740991\n    const maxSafeInteger: number = Math.round(9007199254740991 / seed2);\n    for (let i = 0; i < str.length; i++) {\n      if (hash > maxSafeInteger) {\n        hash = Math.round(hash / seed2);\n      }\n      hash = hash * seed + str.charCodeAt(i);\n    }\n    return hash;\n  };\n\n  /**\n * Convert RGB Array to HEX\n *\n * @param RGBArray - [R, G, B]\n * @returns 6 digits hex starting with #\n */\n  rgb2hex(RGBArray: number[]): string {\n    let hex = '#';\n    RGBArray.forEach(function(value) {\n      if (value < 16) {\n        hex += 0;\n      }\n      hex += value.toString(16);\n    });\n    return hex;\n  };\n\n  /**\n   * Convert HSL to RGB\n   *\n   * @see {@link http://zh.wikipedia.org/wiki/HSLåHSVè²å½©ç©ºé´} for further information.\n   * @param H Hue â [0, 360)\n   * @param S Saturation â [0, 1]\n   * @param L Lightness â [0, 1]\n   * @returns R, G, B â [0, 255]\n   */\n  hsl2rgb(H: number, S: number, L: number): number[] {\n    H /= 360;\n\n    let q = L < 0.5 ? L * (1 + S) : L + S - L * S;\n    let p = 2 * L - q;\n\n    return [H + 1 / 3, H, H - 1 / 3].map(function(color) {\n      if (color < 0) {\n        color++;\n      }\n      if (color > 1) {\n        color--;\n      }\n      if (color < 1 / 6) {\n        color = p + (q - p) * 6 * color;\n      } else if (color < 0.5) {\n        color = q;\n      } else if (color < 2 / 3) {\n        color = p + (q - p) * 6 * (2 / 3 - color);\n      } else {\n        color = p;\n      }\n      return Math.round(color * 255);\n    });\n  };\n\n\n  /**\n   * Returns the hash in [h, s, l].\n   * Note that H â [0, 360); S â [0, 1]; L â [0, 1];\n   *\n   * @param str string to hash\n   * @returns [h, s, l]\n   */\n  hsl(str: string): any[] {\n    let H;\n    let S;\n    let L;\n    let hash = this.hash(str);\n\n    if (this.hueRanges.length) {\n      let range = this.hueRanges[hash % this.hueRanges.length];\n      let hueResolution = 727; // note that 727 is a prime\n      H = ((hash / this.hueRanges.length) % hueResolution) * (range.max - range.min) / hueResolution + range.min;\n    } else {\n      H = hash % 359; // note that 359 is a prime\n    }\n    hash = Math.round(hash / 360);\n    S = this.S[hash % this.S.length];\n    hash = Math.round(hash / this.S.length);\n    L = this.L[hash % this.L.length];\n\n    return [H, S, L];\n  };\n\n  /**\n   * Returns the hash in [r, g, b].\n   * Note that R, G, B â [0, 255]\n   *\n   * @param str string to hash\n   * @returns [r, g, b]\n   */\n  rgb(str: string): number[] {\n    let hsl = this.hsl(str);\n    return this.hsl2rgb(hsl[0], hsl[1], hsl[2]);\n  };\n\n  /**\n   * Returns the hash in hex\n   *\n   * @param str string to hash\n   * @returns hex with #\n   */\n  hex(str: string): string {\n    let rgb = this.rgb(str);\n    return this.rgb2hex(rgb);\n  };\n}\n","import { Component, HostBinding, OnInit, Input } from '@angular/core';\n\nimport { ColorService } from '../color.service';\n\n@Component({\n  selector: 'ft-avatar',\n  templateUrl: './avatar.component.html',\n  styleUrls: ['./avatar.component.scss']\n})\nexport class AvatarComponent implements OnInit {\n  _label: string;\n  _src: string;\n  initials: string;\n  loaded: boolean;\n  @Input()\n  set src(value: string) {\n    if (value && value.trim()!='') {\n      this._src = value;\n      let image = new Image();\n      image.src = value;\n      image.onload = () => {\n        if (\"decode\" in image) {\n          image.decode().then(() => {\n            this.loaded = true;\n          });\n        } else {\n          console.error('Image.decode not available.');\n        }\n      };\n    }\n  }\n  @Input()\n  set label(value: string) {\n    this._label = value;\n    this.initials = this.getInitials(value);\n  }\n  @HostBinding('style.background-color')\n  get backgroundColor(): string {\n    return this.colorService.hex(this._label);\n  }\n  @HostBinding('style.background-image')\n  get backgroundImage(): string {\n    return `url(${this._src})`;\n  }\n\n  constructor(\n    private colorService: ColorService\n  ) { }\n\n  ngOnInit() {\n\n  }\n  getInitials(value: string): string {\n    let allInitials: string[] = value.match(/\\b\\w/g) || [];\n    let initials: string = ((allInitials.shift() || '') + (allInitials.pop() || '')).toUpperCase();\n    return initials;\n  }\n\n}\n","import { Component, OnInit, Input, Inject } from '@angular/core';\n\n@Component({\n  selector: 'ft-icon',\n  templateUrl: './icon.component.html',\n  styleUrls: ['./icon.component.scss']\n})\nexport class IconComponent implements OnInit {\n  @Input()\n  name: string;\n  @Input()\n  collection: string;\n  @Input()\n  path: string;\n\n  constructor(\n    @Inject('FactorCommonConfiguration') private configuration\n  ) { }\n\n  ngOnInit() {\n    if (!this.collection) {\n      if (this.configuration.icon && this.configuration.icon.collection) {\n        this.collection = this.configuration.icon.collection;\n      } else {\n        this.collection = 'icons';\n      }\n    }\n    if (!this.path) {\n      if (this.configuration.icon && this.configuration.icon.path) {\n        this.path = this.configuration.icon.path;\n      } else {\n        this.path = 'assets';\n      }\n    }\n  }\n}\n","import { Component, OnInit, Input, HostBinding, ElementRef } from '@angular/core';\n\n@Component({\n  selector: 'ft-image',\n  templateUrl: './image.component.html',\n  styleUrls: ['./image.component.scss']\n})\nexport class ImageComponent implements OnInit {\n  @HostBinding('class.error')\n  error: boolean;\n  @HostBinding('class.loading')\n  loading: boolean;\n  @Input()\n  src: string;\n  shown: boolean;\n\n  constructor(\n    private element: ElementRef\n  ) { }\n\n  ngOnInit() {\n    if (\"IntersectionObserver\" in window) {\n      let elementObserver = new IntersectionObserver((entries, observer) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            let image = new Image();\n            image.src = this.src;\n            setTimeout(() => {\n              this.loading = true;\n            }, 100);\n            image.onerror = () => {\n              this.error = true;\n              this.loading = false;\n            };\n            image.onload = () => {\n              if (\"decode\" in image) {\n                image.decode().then(() => {\n                  this.loading = false;\n                  this.shown = true;\n                });\n              } else {\n                console.error('Image.decode not available.');\n              }\n            };\n            elementObserver.unobserve(this.element.nativeElement);\n          }\n        });\n      }, {\n        rootMargin: \"0px 0px 200px 0px\"\n      });\n      elementObserver.observe(this.element.nativeElement);\n    } else {\n      console.error('IntersectionObserver not available.');\n      this.shown = true;\n    }\n  }\n\n}\n","import { Directive, EventEmitter, HostListener, OnInit, Output, Input, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[ftObserveIntersecting]'\n})\nexport class ObserveIntersectingDirective implements OnInit {\n  @Input('ftObserveIntersectingOptions')\n  options: { root: any, rootMargin: any, threshold: any };\n  @Output('ftObserveIntersecting')\n  event: EventEmitter<boolean> = new EventEmitter();\n\n  constructor(\n    private element: ElementRef\n  ) { }\n\n  ngOnInit() {\n    if (\"IntersectionObserver\" in window) {\n      const elementObserver = new IntersectionObserver((entries, observer) => {\n        entries.forEach((entry) => {\n          this.event.emit(entry.isIntersecting);\n        });\n      }, this.options);\n      elementObserver.observe(this.element.nativeElement);\n    } else {\n      console.error('ftObserveIntersecting not available in this browser.');\n    }\n  }\n\n}\n","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'ft-progress',\n  templateUrl: './progress.component.html',\n  styleUrls: ['./progress.component.scss']\n})\nexport class ProgressComponent implements OnInit {\n  @Input()\n  color: string;\n  @Input()\n  mode: 'determinate' | 'indeterminate' = 'indeterminate';\n  @Input()\n  size: number;\n  @Input()\n  value: number;\n\n  constructor() { }\n\n  ngOnInit() {\n    this.color = 'var(--primary)';\n    this.value = 0;\n  }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule as AngularCommonModule } from '@angular/common';\n\nimport { AvatarComponent } from './avatar/avatar.component';\nimport { IconComponent } from './icon/icon.component';\nimport { ImageComponent } from './image/image.component';\nimport { ObserveIntersectingDirective } from './observe-intersecting.directive';\nimport { ProgressComponent } from './progress/progress.component';\n\n@NgModule({\n  declarations: [\n    AvatarComponent,\n    IconComponent,\n    ImageComponent,\n    ObserveIntersectingDirective,\n    ProgressComponent\n  ],\n  imports: [\n    AngularCommonModule\n  ],\n  exports: [\n    AvatarComponent,\n    IconComponent,\n    ImageComponent,\n    ObserveIntersectingDirective,\n    ProgressComponent\n  ]\n})\nexport class CommonModule {\n  public static forRoot(configuration?: any): ModuleWithProviders {\n    return {\n      ngModule: CommonModule,\n      providers: [\n        { provide: 'FactorCommonConfiguration', useValue: configuration }\n      ]\n    };\n  }\n}\n"]}