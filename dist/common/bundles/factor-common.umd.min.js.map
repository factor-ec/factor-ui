{"version":3,"sources":["ng://factor-common/lib/storage.service.ts","ng://factor-common/lib/auth.service.ts","ng://factor-common/lib/auth-interceptor.ts","ng://factor-common/lib/common.module.ts","ng://factor-common/lib/google-analytics.service.ts"],"names":["StorageService","prototype","delete","key","storage","sessionStorage","get","parsedValue","value","JSON","parse","err","set","stringify","Injectable","args","providedIn","AuthService","http","injector","storageService","environment","this","loggedInSource","BehaviorSubject","loggedIn$","asObservable","configurationSource","configuration$","login","formValue","_this","body","Object","assign","grant_type","response_type","client_id","oauth","clientId","client_secret","clientSecret","post","tokenUrl","pipe","tap","token","logout","redirect","router","Router","next","navigate","getConfiguration","configurationUrl","response","username","user","picture","localStorage","getToken","checkAuth","subscribe","error","status","navigateByUrl","skipLocationChange","HttpClient","Injector","Inject","AuthInterceptor","intercept","request","authService","clone","headers","token_type","access_token","handle","event","HttpErrorResponse","CommonModule","forRoot","ngModule","providers","provide","HTTP_INTERCEPTORS","useClass","multi","useValue","NgModule","imports","declarations","exports","GoogleAnalyticsService","events","gtag","NavigationEnd","setTimeout","googleAnalytics","trackingId","page_title","document","title","page_path","urlAfterRedirects","e","console","log","appendTrackingCode","s1","createElement","async","src","head","appendChild","s2","innerHTML","ex","setEvent","action","category","label","event_category","event_label","setUserId","userId","user_id"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StorageService {\n\n  constructor() { }\n\n  delete(key: string, storage?) {\n    if (storage) {\n      delete storage[key];\n    }else{\n      delete sessionStorage[key];\n    }\n  }\n  get(key: string, storage?) {\n    let parsedValue;\n    let value = storage ? storage[key] : sessionStorage[key];\n    if (value) {\n      try {\n        parsedValue = JSON.parse(value);\n      } catch (err) {\n        parsedValue = value;\n      }\n    }\n    return parsedValue;\n  }\n  set(key: string, value: any, storage?) {\n    if (storage) {\n      storage[key] = JSON.stringify(value);\n    } else {\n      sessionStorage[key] = JSON.stringify(value);\n    }\n  }\n}\n","import { Injectable, Injector, Inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject, Observable } from \"rxjs\";\nimport { tap } from 'rxjs/operators';\n\nimport { StorageService } from './storage.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private loggedInSource: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n  loggedIn$: Observable<boolean> = this.loggedInSource.asObservable();\n  private configurationSource: BehaviorSubject<any> = new BehaviorSubject<any>(false);\n  configuration$: Observable<any> = this.configurationSource.asObservable();\n  router: Router;\n\n  constructor(\n    private http: HttpClient,\n    private injector: Injector,\n    private storageService: StorageService,\n    @Inject('environment') private environment\n  ) { }\n\n  login(formValue: { username: string, password: string }) {\n    let body: object = Object.assign(formValue, {\n      grant_type: 'password',\n      response_type: 'token',\n      client_id: this.environment.oauth.clientId,\n      client_secret: this.environment.oauth.clientSecret\n    });\n    return this.http.post(this.environment.oauth.tokenUrl, body).pipe(tap((token: any) => {\n      this.storageService.set('token', token);\n    }));\n  }\n  logout(redirect?: string) {\n    this.router = this.injector.get(Router);\n    this.storageService.delete('token');\n    this.loggedInSource.next(false);\n    this.router.navigate(['/login', redirect? {redirect:redirect} : {}]);\n  }\n  getConfiguration() {\n    return this.http.get(this.environment.configurationUrl).pipe(tap((response: any) => {\n      this.loggedInSource.next(true);\n      this.configurationSource.next(response);\n      //Save last user loggedIn\n      this.storageService.set('lastUser', {\n        username: response.user.username,\n        picture: response.picture\n      }, localStorage);\n    }));\n  }\n  getToken() {\n    return this.storageService.get('token');\n  }\n  checkAuth() {\n    if (this.getToken()) {\n      let config = this.getConfiguration().subscribe(()=>{\n        this.loggedInSource.next(true);\n      }, (error)=>{\n        if (error.status == 0) {\n          this.router = this.injector.get(Router);\n          this.router.navigateByUrl('/error/0', { skipLocationChange: true });\n        }\n      });\n      return config;\n    }else{\n      return false;\n    }\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest, HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from \"rxjs\";\nimport { tap } from 'rxjs/operators';\n\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class AuthInterceptor {\n  private authService: AuthService;\n\n  constructor(\n    private injector: Injector\n  ) { }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    this.authService = this.injector.get(AuthService);\n    let token = this.authService.getToken();\n    if (token) {\n      request = request.clone({\n        headers: request.headers.set('Authorization', `${token.token_type} ${token.access_token}`)\n      });\n    }\n    return next.handle(request).pipe(\n      tap(event => { }, err => {\n        if (err instanceof HttpErrorResponse) {\n          if (err.status == 401) {\n            this.authService.logout();\n          }\n        }\n      })\n    );\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { AuthInterceptor } from './auth-interceptor';\n\n@NgModule({\n  imports: [],\n  declarations: [],\n  exports: []\n})\nexport class CommonModule {\n  public static forRoot(environment: any): ModuleWithProviders {\n    return {\n      ngModule: CommonModule,\n      providers: [\n        { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },\n        { provide: 'environment', useValue: environment }\n      ]\n    };\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\n\ndeclare var gtag: Function;\n\n@Injectable()\nexport class GoogleAnalyticsService {\n  constructor(\n    public router: Router,\n    @Inject('environment') private environment\n  ) {\n    router.events.subscribe(event => {\n      try {\n        if (typeof gtag === 'function') {\n          if (event instanceof NavigationEnd) {\n            setTimeout(()=>{\n              gtag('config', this.environment.googleAnalytics.trackingId, {\n                'page_title': document.title,\n                'page_path': event.urlAfterRedirects\n              });\n            }, 100);\n          }\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    });\n  }\n  public appendTrackingCode(): void {\n    try {\n      if (this.environment.googleAnalytics && this.environment.googleAnalytics.trackingId) {\n        const s1 = document.createElement('script');\n        s1.async = true;\n        s1.src = `https://www.googletagmanager.com/gtag/js?id=${this.environment.googleAnalytics.trackingId}`;\n        document.head.appendChild(s1);\n        const s2 = document.createElement('script');\n        s2.innerHTML = `\n         window.dataLayer = window.dataLayer || [];\n         function gtag(){dataLayer.push(arguments);}\n         gtag('js', new Date());\n         gtag('config', '${this.environment.googleAnalytics.trackingId}');\n       `;\n        document.head.appendChild(s2);\n      }\n    } catch (ex) {\n      console.error('Error appending google analytics');\n      console.error(ex);\n    }\n  }\n  public setEvent(action: string, category: string = null, label: string = null, value: number = null): void {\n    if (typeof gtag === 'function') {\n      gtag('event', action, {\n        event_category: category,\n        event_label: label,\n        value: value\n      });\n    }\n  }\n  public setUserId(userId: string): void {\n    if (typeof gtag === 'function') {\n      gtag('set', { 'user_id': userId });\n    }\n  }\n}\n"]}