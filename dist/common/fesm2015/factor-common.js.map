{"version":3,"file":"factor-common.js.map","sources":["ng://factor-common/lib/icon/icon.component.ts","ng://factor-common/lib/image/image.component.ts","ng://factor-common/lib/progress/progress.component.ts","ng://factor-common/lib/message/message.component.ts","ng://factor-common/lib/message.service.ts","ng://factor-common/lib/observe-intersecting.directive.ts","ng://factor-common/lib/common.module.ts"],"sourcesContent":["import { Component, OnInit, Input, Inject } from '@angular/core';\n\n@Component({\n  selector: 'ft-icon',\n  templateUrl: './icon.component.html',\n  styleUrls: ['./icon.component.scss']\n})\nexport class IconComponent implements OnInit {\n  @Input()\n  name: string;\n  @Input()\n  collection: string;\n  @Input()\n  path: string;\n\n  constructor(\n    @Inject('FactorCommonConfiguration') private configuration\n  ) { }\n\n  ngOnInit() {\n    if (!this.collection) {\n      if (this.configuration.icon && this.configuration.icon.collection) {\n        this.collection = this.configuration.icon.collection;\n      } else {\n        this.collection = 'icons';\n      }\n    }\n    if (!this.path) {\n      if (this.configuration.icon && this.configuration.icon.path) {\n        this.path = this.configuration.icon.path;\n      } else {\n        this.path = 'assets';\n      }\n    }\n  }\n}\n","import { Component, OnInit, Input, HostBinding, ElementRef } from '@angular/core';\n\n@Component({\n  selector: 'ft-image',\n  templateUrl: './image.component.html',\n  styleUrls: ['./image.component.scss']\n})\nexport class ImageComponent implements OnInit {\n  @HostBinding('class.error')\n  error: boolean;\n  @HostBinding('class.loading')\n  loading: boolean;\n  @Input()\n  src: string;\n  shown: boolean;\n\n  constructor(\n    private element: ElementRef\n  ) { }\n\n  ngOnInit() {\n    if (\"IntersectionObserver\" in window) {\n      let elementObserver = new IntersectionObserver((entries, observer) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            let image = new Image();\n            image.src = this.src;\n            setTimeout(() => {\n              this.loading = true;\n            }, 100);\n            image.onerror = () => {\n              this.error = true;\n              this.loading = false;\n            };\n            image.onload = () => {\n              if (\"decode\" in image) {\n                image.decode().then(() => {\n                  this.loading = false;\n                  this.shown = true;\n                });\n              } else {\n                console.error('Image.decode not available.');\n              }\n            };\n            elementObserver.unobserve(this.element.nativeElement);\n          }\n        });\n      }, {\n        rootMargin: \"0px 0px 200px 0px\"\n      });\n      elementObserver.observe(this.element.nativeElement);\n    } else {\n      console.error('IntersectionObserver not available.');\n      this.shown = true;\n    }\n  }\n\n}\n","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'ft-progress',\n  templateUrl: './progress.component.html',\n  styleUrls: ['./progress.component.scss']\n})\nexport class ProgressComponent implements OnInit {\n  @Input()\n  color: string = 'var(--primary)';\n  @Input()\n  mode: 'determinate' | 'indeterminate' = 'indeterminate';\n  @Input()\n  value: number = 0;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Component, HostBinding, Inject, Input, OnInit } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  selector: 'ft-message',\n  templateUrl: './message.component.html',\n  styleUrls: ['./message.component.scss']\n})\nexport class MessageComponent implements OnInit {\n  constructor(\n    public dialogRef: MatDialogRef<MessageComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) { }\n\n  ngOnInit() {\n  }\n  @HostBinding('class')\n  get hostClasses(): string {\n    return [\n    ].join(' ');\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatDialog } from '@angular/material/dialog';\n\nimport { MessageComponent } from './message/message.component';\n\nexport interface Action {\n  label: string;\n  value: any;\n}\nexport interface Options {\n  type?: 'modal' | 'notification';\n  actions?: Action[];\n  duration?: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MessageService {\n  element: any;\n\n  constructor(\n    private snackBar: MatSnackBar,\n    private dialog: MatDialog\n  ) { }\n\n  show(message: string, options?: Options): Observable<any> {\n    const defaults: any = {\n      type: null,\n      duration: 2000\n    };\n    options = Object.assign(defaults, options);\n    switch (options.type) {\n      default:\n      case 'notification':\n        this.snackBar.open(message, '', {\n          duration: options.duration || 2000,\n        });\n        break;\n      case 'modal':\n        const dialogRef = this.dialog.open(MessageComponent, {\n          width: '250px',\n          data: { message, options },\n          disableClose: true\n        });\n        this.snackBar.dismiss();\n        break;\n    }\n    return of(null);\n  }\n}\n","import { Directive, EventEmitter, HostListener, OnInit, Output, Input, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[ftObserveIntersecting]'\n})\nexport class ObserveIntersectingDirective implements OnInit {\n  @Input('ftObserveIntersectingOptions')\n  options: { root: any, rootMargin: any, threshold: any };\n  @Output('ftObserveIntersecting')\n  event: EventEmitter<boolean> = new EventEmitter();\n\n  constructor(\n    private element: ElementRef\n  ) { }\n\n  ngOnInit() {\n    if (\"IntersectionObserver\" in window) {\n      const elementObserver = new IntersectionObserver((entries, observer) => {\n        entries.forEach((entry) => {\n          this.event.emit(entry.isIntersecting);\n        });\n      }, this.options);\n      elementObserver.observe(this.element.nativeElement);\n    } else {\n      console.error('ftObserveIntersecting not available in this browser.');\n    }\n  }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule as AngularCommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\n\nimport { IconComponent } from './icon/icon.component';\nimport { ImageComponent } from './image/image.component';\nimport { ProgressComponent } from './progress/progress.component';\nimport { ObserveIntersectingDirective } from './observe-intersecting.directive';\nimport { MessageComponent } from './message/message.component';\n\n@NgModule({\n  declarations: [\n    IconComponent,\n    ImageComponent,\n    ProgressComponent,\n    ObserveIntersectingDirective,\n    MessageComponent\n  ],\n  imports: [\n    AngularCommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    MatSnackBarModule\n  ],\n  exports: [\n    IconComponent,\n    ImageComponent,\n    ProgressComponent,\n    ObserveIntersectingDirective\n  ],\n  entryComponents: [\n    MessageComponent\n  ]\n})\nexport class CommonModule {\n  public static forRoot(configuration: any): ModuleWithProviders {\n    return {\n      ngModule: CommonModule,\n      providers: [\n        { provide: 'FactorCommonConfiguration', useValue: configuration }\n      ]\n    };\n  }\n}\n"],"names":["CommonModule","AngularCommonModule"],"mappings":"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"}
