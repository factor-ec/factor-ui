{"version":3,"file":"factor-auth.umd.js.map","sources":["ng://factor-auth/lib/jwt.service.ts","ng://factor-auth/lib/oauth.service.ts","ng://factor-auth/lib/auth.service.ts","ng://factor-auth/lib/auth-interceptor.ts","ng://factor-auth/lib/auth.module.ts","ng://factor-auth/lib/auth.guard.ts","ng://factor-auth/lib/login.guard.ts"],"sourcesContent":["import { Inject, Injectable, Injector } from '@angular/core';\nimport { HttpClient, HttpRequest, HttpHandler } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject, Observable } from \"rxjs\";\nimport { tap } from 'rxjs/operators';\n\nimport { StorageService } from 'factor-utils';\n\nimport { AuthProvider } from './auth-provider';\nimport { Login } from './models/login';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class JwtService implements AuthProvider {\n  private loggedInSource: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n  public loggedIn: Observable<boolean> = this.loggedInSource.asObservable();\n  private tokenKey = 'auth_jwt';\n\n  constructor(\n    private http: HttpClient,\n    private storageService: StorageService,\n    @Inject('FactorAuthConfiguration') private configuration,\n    private injector: Injector\n  ) {\n    this.checkLoggedIn();\n  }\n\n  addAuthenticationToken(request: HttpRequest<any>): HttpRequest<any> {\n    const token: string = this.getToken();\n\n    // If access token is null this means that user is not logged in\n    // And we return the original request\n    if (!token || request.url.includes(\"token\")) {\n      return request;\n    }\n\n    // We clone the request, because the original request is immutable\n    return request.clone({\n      setHeaders: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n  }\n  checkLoggedIn(): Observable<boolean> {\n    if (this.getToken()) {\n      this.loggedInSource.next(true);\n    } else {\n      this.loggedInSource.next(false);\n    }\n    return this.loggedIn;\n  }\n  getToken(): string {\n    return this.storageService.get(this.tokenKey, 'local');\n  }\n  login(data: Login): Observable<any> {\n    return this.http.post(this.configuration.tokenUrl, data).pipe(tap((token: any) => {\n      this.storageService.set(this.tokenKey, token.token, 'local');\n      this.loggedInSource.next(true);\n    }));\n  }\n  logout(): void {\n    this.storageService.delete(this.tokenKey, 'local');\n    this.loggedInSource.next(false);\n    if (this.configuration.nosessionUrl) {\n      const router = this.injector.get(Router);\n      router.navigateByUrl(this.configuration.nosessionUrl);\n    }\n  }\n}\n","import { Inject, Injectable, Injector } from '@angular/core';\nimport { HttpClient, HttpRequest, HttpHandler } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject, Observable, throwError } from \"rxjs\";\nimport { tap, catchError, filter, take, switchMap, finalize, share } from 'rxjs/operators';\n\nimport { StorageService } from 'factor-utils';\n\nimport { AuthProvider } from './auth-provider';\nimport { Token } from './models/token';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OAuthService implements AuthProvider {\n  private loggedInSource: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n  public loggedIn: Observable<boolean> = this.loggedInSource.asObservable();\n  private refreshTokenInProgress = false;\n  private refreshTokenSubject: BehaviorSubject<any> = new BehaviorSubject<any>(null);\n\n  constructor(\n    private http: HttpClient,\n    private storageService: StorageService,\n    @Inject('FactorAuthConfiguration') private configuration,\n    private injector: Injector\n  ) {\n    this.checkLoggedIn();\n  }\n\n  addAuthenticationToken(request): HttpRequest<any> {\n    const token: Token = this.getToken();\n\n    // If access token is null this means that user is not logged in\n    // And we return the original request\n    if (!token || request.url.includes(\"token\")) {\n      return request;\n    }\n\n    // We clone the request, because the original request is immutable\n    return request.clone({\n      setHeaders: {\n        Authorization: `${token.token_type} ${token.access_token}`\n      }\n    });\n  }\n  checkLoggedIn() {\n    if (this.getToken()) {\n      this.loggedInSource.next(true);\n    } else {\n      this.loggedInSource.next(false);\n    }\n    return this.loggedIn;\n  }\n  getToken(): Token {\n    return this.storageService.get('token', 'local');\n  }\n  handle401Error(request: HttpRequest<any>, next: HttpHandler): Observable<any> {\n    if (!this.refreshTokenInProgress) {\n      this.refreshTokenInProgress = true;\n      this.refreshTokenSubject.next(null);\n      return this.refreshToken().pipe(\n        switchMap((newToken: Token) => {\n          if (newToken) {\n            this.refreshTokenSubject.next(newToken);\n            return next.handle(this.addAuthenticationToken(request));\n          }\n\n          // If we don't get a new token, we are in trouble so logout.\n          this.logout();\n          return throwError('');\n        }),\n        catchError(error => {\n          // If there is an exception calling 'refreshToken', bad news so logout.\n          this.logout();\n          return throwError(error);\n        }),\n        share(),\n        finalize(() => {\n          this.refreshTokenInProgress = false;\n        }),\n      );\n    } else {\n      return this.refreshTokenSubject.pipe(\n        filter(token => token != null),\n        take(1),\n        switchMap(token => {\n          return next.handle(this.addAuthenticationToken(request));\n        })\n      );\n    }\n  }\n  login(form: { username: string, password: string }): Observable<Token> {\n    const params = {\n      client_id: this.configuration.clientId,\n      client_secret: this.configuration.clientSecret,\n      grant_type: 'password',\n      response_type: 'token',\n      username: form.username,\n      password: form.password,\n      state: Date.now()\n    };\n    return this.http.post(this.configuration.tokenUrl, params).pipe(tap((token: Token) => {\n      this.storageService.set('token', token, 'local');\n      this.loggedInSource.next(true);\n    }));\n  }\n  logout(): void {\n    this.storageService.delete('token', 'local');\n    this.loggedInSource.next(false);\n    if (this.configuration.nosessionUrl) {\n      const router = this.injector.get(Router);\n      router.navigateByUrl(this.configuration.nosessionUrl);\n    }\n  }\n  refreshToken(): Observable<Token> {\n    const token = this.getToken();\n    const url = `${this.configuration.tokenUrl}`;\n    const params = {\n      client_id: this.configuration.clientId,\n      client_secret: this.configuration.clientSecret,\n      grant_type: 'refresh_token',\n      refresh_token: token.refresh_token\n    };\n    return this.http.get(url, { params: params }).pipe(tap((token: Token) => {\n      this.storageService.set('token', token, 'local');\n      this.loggedInSource.next(true);\n    }));\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable } from \"rxjs\";\nimport { tap } from 'rxjs/operators';\n\nimport { StorageService } from 'factor-utils';\n\nimport { JwtService } from './jwt.service';\nimport { OAuthService } from './oauth.service';\nimport { AuthProvider } from './auth-provider';\nimport { Token } from './models/token';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  \n  constructor(\n    private http: HttpClient,\n    private storageService: StorageService,\n    private jwtService: JwtService,\n    private oauthService: OAuthService,\n    @Inject('FactorAuthConfiguration') private configuration\n  ) {\n    this.getProvider().checkLoggedIn();\n  }\n\n  getProvider(): AuthProvider {\n    return this.configuration.type === 'oauth' ? this.oauthService : this.jwtService;\n  }\n}\n","import { Inject, Injectable, Injector } from '@angular/core';\nimport { HttpHandler, HttpRequest, HttpErrorResponse, HttpSentEvent, HttpHeaderResponse, HttpProgressEvent, HttpResponse, HttpUserEvent } from '@angular/common/http';\nimport { Observable, BehaviorSubject, throwError } from 'rxjs';\nimport { catchError, filter, take, switchMap, finalize, share } from 'rxjs/operators';\n\nimport { AuthService } from './auth.service';\nimport { Token } from './models/token';\n\n@Injectable()\nexport class AuthInterceptor {\n  private authService: any;\n  private refreshTokenInProgress = false;\n  private refreshTokenSubject: BehaviorSubject<any> = new BehaviorSubject<any>(null);\n\n  constructor(\n    private injector: Injector,\n    @Inject('FactorAuthConfiguration') private configuration\n  ) { }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpSentEvent | HttpHeaderResponse | HttpProgressEvent | HttpResponse<any> | HttpUserEvent<any> | any> {\n    this.authService = this.injector.get(AuthService);\n    return next.handle(this.authService.getProvider().addAuthenticationToken(request)).pipe(\n      catchError(error => {\n        if (error instanceof HttpErrorResponse) {\n          switch ((<HttpErrorResponse>error).status) {\n            case 401:\n              if (this.authService.getProvider().handle401Error !== 'undefined') {\n                return this.authService.getProvider().handle401Error(request, next);\n              } else {\n                this.authService.getProvider().logout();\n                return throwError(error);\n              }\n              break;\n            default:\n              return throwError(error);\n              break;\n          }\n        } else {\n          return throwError(error);\n        }\n      })\n    );\n  }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { AuthInterceptor } from './auth-interceptor';\n\n@NgModule({\n  declarations: [],\n  imports: [],\n  exports: []\n})\nexport class AuthModule {\n  public static forRoot(configuration: any): ModuleWithProviders {\n    return {\n      ngModule: AuthModule,\n      providers: [\n        { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },\n        { provide: 'FactorAuthConfiguration', useValue: configuration }\n      ]\n    };\n  }\n}\n","\nimport { Inject, Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(\n    private authService: AuthService,\n    @Inject('FactorAuthConfiguration') private configuration\n  ) { }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n    if (this.authService.getProvider().getToken()) {\n      return true;\n    } else {\n      this.authService.getProvider().logout();\n      return false;\n    }\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginGuard implements CanActivate {\n\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    @Inject('FactorAuthConfiguration') private configuration\n  ) { }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n    if (this.authService.getProvider().getToken()) {\n      this.router.navigateByUrl('/');\n      return false;\n    } else {\n      return true;\n    }\n  }\n}\n"],"names":["BehaviorSubject","tap","Router","Injectable","HttpClient","StorageService","Inject","Injector","switchMap","throwError","catchError","share","finalize","filter","take","HttpErrorResponse","HTTP_INTERCEPTORS","NgModule"],"mappings":";;;;;;;;;;AAAA;QAmBE,oBACU,IAAgB,EAChB,cAA8B,EACK,aAAa,EAChD,QAAkB;YAHlB,SAAI,GAAJ,IAAI,CAAY;YAChB,mBAAc,GAAd,cAAc,CAAgB;YACK,kBAAa,GAAb,aAAa,CAAA;YAChD,aAAQ,GAAR,QAAQ,CAAU;YARpB,mBAAc,GAA6B,IAAIA,oBAAe,CAAU,KAAK,CAAC,CAAC;YAChF,aAAQ,GAAwB,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC;YAClE,aAAQ,GAAG,UAAU,CAAC;YAQ5B,IAAI,CAAC,aAAa,EAAE,CAAC;SACtB;;;;;QAED,2CAAsB;;;;YAAtB,UAAuB,OAAyB;;oBACxC,KAAK,GAAW,IAAI,CAAC,QAAQ,EAAE;;;gBAIrC,IAAI,CAAC,KAAK,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;oBAC3C,OAAO,OAAO,CAAC;iBAChB;;gBAGD,OAAO,OAAO,CAAC,KAAK,CAAC;oBACnB,UAAU,EAAE;wBACV,aAAa,EAAE,YAAU,KAAO;qBACjC;iBACF,CAAC,CAAC;aACJ;;;;QACD,kCAAa;;;YAAb;gBACE,IAAI,IAAI,CAAC,QAAQ,EAAE,EAAE;oBACnB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBAChC;qBAAM;oBACL,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBACjC;gBACD,OAAO,IAAI,CAAC,QAAQ,CAAC;aACtB;;;;QACD,6BAAQ;;;YAAR;gBACE,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;aACxD;;;;;QACD,0BAAK;;;;YAAL,UAAM,IAAW;gBAAjB,iBAKC;gBAJC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,IAAI,CAACC,aAAG;;;mBAAC,UAAC,KAAU;oBAC3E,KAAI,CAAC,cAAc,CAAC,GAAG,CAAC,KAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;oBAC7D,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBAChC,EAAC,CAAC,CAAC;aACL;;;;QACD,2BAAM;;;YAAN;gBACE,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;gBACnD,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAChC,IAAI,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE;;wBAC7B,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAACC,WAAM,CAAC;oBACxC,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;iBACvD;aACF;;oBAzDFC,aAAU,SAAC;wBACV,UAAU,EAAE,MAAM;qBACnB;;;;;wBAZQC,aAAU;wBAKVC,iBAAc;wDAgBlBC,SAAM,SAAC,yBAAyB;wBAtBRC,WAAQ;;;;yBAArC;KAWA;;;;;;ACXA;QAoBE,sBACU,IAAgB,EAChB,cAA8B,EACK,aAAa,EAChD,QAAkB;YAHlB,SAAI,GAAJ,IAAI,CAAY;YAChB,mBAAc,GAAd,cAAc,CAAgB;YACK,kBAAa,GAAb,aAAa,CAAA;YAChD,aAAQ,GAAR,QAAQ,CAAU;YATpB,mBAAc,GAA6B,IAAIP,oBAAe,CAAU,KAAK,CAAC,CAAC;YAChF,aAAQ,GAAwB,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC;YAClE,2BAAsB,GAAG,KAAK,CAAC;YAC/B,wBAAmB,GAAyB,IAAIA,oBAAe,CAAM,IAAI,CAAC,CAAC;YAQjF,IAAI,CAAC,aAAa,EAAE,CAAC;SACtB;;;;;QAED,6CAAsB;;;;YAAtB,UAAuB,OAAO;;oBACtB,KAAK,GAAU,IAAI,CAAC,QAAQ,EAAE;;;gBAIpC,IAAI,CAAC,KAAK,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;oBAC3C,OAAO,OAAO,CAAC;iBAChB;;gBAGD,OAAO,OAAO,CAAC,KAAK,CAAC;oBACnB,UAAU,EAAE;wBACV,aAAa,EAAK,KAAK,CAAC,UAAU,SAAI,KAAK,CAAC,YAAc;qBAC3D;iBACF,CAAC,CAAC;aACJ;;;;QACD,oCAAa;;;YAAb;gBACE,IAAI,IAAI,CAAC,QAAQ,EAAE,EAAE;oBACnB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBAChC;qBAAM;oBACL,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBACjC;gBACD,OAAO,IAAI,CAAC,QAAQ,CAAC;aACtB;;;;QACD,+BAAQ;;;YAAR;gBACE,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;aAClD;;;;;;QACD,qCAAc;;;;;YAAd,UAAe,OAAyB,EAAE,IAAiB;gBAA3D,iBAkCC;gBAjCC,IAAI,CAAC,IAAI,CAAC,sBAAsB,EAAE;oBAChC,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC;oBACnC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBACpC,OAAO,IAAI,CAAC,YAAY,EAAE,CAAC,IAAI,CAC7BQ,mBAAS;;;uBAAC,UAAC,QAAe;wBACxB,IAAI,QAAQ,EAAE;4BACZ,KAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;4BACxC,OAAO,IAAI,CAAC,MAAM,CAAC,KAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,CAAC;yBAC1D;;wBAGD,KAAI,CAAC,MAAM,EAAE,CAAC;wBACd,OAAOC,eAAU,CAAC,EAAE,CAAC,CAAC;qBACvB,EAAC,EACFC,oBAAU;;;uBAAC,UAAA,KAAK;;wBAEd,KAAI,CAAC,MAAM,EAAE,CAAC;wBACd,OAAOD,eAAU,CAAC,KAAK,CAAC,CAAC;qBAC1B,EAAC,EACFE,eAAK,EAAE,EACPC,kBAAQ;;uBAAC;wBACP,KAAI,CAAC,sBAAsB,GAAG,KAAK,CAAC;qBACrC,EAAC,CACH,CAAC;iBACH;qBAAM;oBACL,OAAO,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAClCC,gBAAM;;;uBAAC,UAAA,KAAK,IAAI,OAAA,KAAK,IAAI,IAAI,GAAA,EAAC,EAC9BC,cAAI,CAAC,CAAC,CAAC,EACPN,mBAAS;;;uBAAC,UAAA,KAAK;wBACb,OAAO,IAAI,CAAC,MAAM,CAAC,KAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,CAAC;qBAC1D,EAAC,CACH,CAAC;iBACH;aACF;;;;;QACD,4BAAK;;;;YAAL,UAAM,IAA4C;gBAAlD,iBAcC;;oBAbO,MAAM,GAAG;oBACb,SAAS,EAAE,IAAI,CAAC,aAAa,CAAC,QAAQ;oBACtC,aAAa,EAAE,IAAI,CAAC,aAAa,CAAC,YAAY;oBAC9C,UAAU,EAAE,UAAU;oBACtB,aAAa,EAAE,OAAO;oBACtB,QAAQ,EAAE,IAAI,CAAC,QAAQ;oBACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ;oBACvB,KAAK,EAAE,IAAI,CAAC,GAAG,EAAE;iBAClB;gBACD,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,IAAI,CAACP,aAAG;;;mBAAC,UAAC,KAAY;oBAC/E,KAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;oBACjD,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBAChC,EAAC,CAAC,CAAC;aACL;;;;QACD,6BAAM;;;YAAN;gBACE,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;gBAC7C,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAChC,IAAI,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE;;wBAC7B,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAACC,WAAM,CAAC;oBACxC,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;iBACvD;aACF;;;;QACD,mCAAY;;;YAAZ;gBAAA,iBAaC;;oBAZO,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE;;oBACvB,GAAG,GAAG,KAAG,IAAI,CAAC,aAAa,CAAC,QAAU;;oBACtC,MAAM,GAAG;oBACb,SAAS,EAAE,IAAI,CAAC,aAAa,CAAC,QAAQ;oBACtC,aAAa,EAAE,IAAI,CAAC,aAAa,CAAC,YAAY;oBAC9C,UAAU,EAAE,eAAe;oBAC3B,aAAa,EAAE,KAAK,CAAC,aAAa;iBACnC;gBACD,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC,IAAI,CAACD,aAAG;;;mBAAC,UAAC,KAAY;oBAClE,KAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;oBACjD,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBAChC,EAAC,CAAC,CAAC;aACL;;oBApHFE,aAAU,SAAC;wBACV,UAAU,EAAE,MAAM;qBACnB;;;;;wBAZQC,aAAU;wBAKVC,iBAAc;wDAiBlBC,SAAM,SAAC,yBAAyB;wBAvBRC,WAAQ;;;;2BAArC;KAWA;;;;;;ACXA;QAiBE,qBACU,IAAgB,EAChB,cAA8B,EAC9B,UAAsB,EACtB,YAA0B,EACS,aAAa;YAJhD,SAAI,GAAJ,IAAI,CAAY;YAChB,mBAAc,GAAd,cAAc,CAAgB;YAC9B,eAAU,GAAV,UAAU,CAAY;YACtB,iBAAY,GAAZ,YAAY,CAAc;YACS,kBAAa,GAAb,aAAa,CAAA;YAExD,IAAI,CAAC,WAAW,EAAE,CAAC,aAAa,EAAE,CAAC;SACpC;;;;QAED,iCAAW;;;YAAX;gBACE,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,KAAK,OAAO,GAAG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC;aAClF;;oBAjBFJ,aAAU,SAAC;wBACV,UAAU,EAAE,MAAM;qBACnB;;;;;wBAbQC,aAAU;wBAIVC,iBAAc;wBAEd,UAAU;wBACV,YAAY;wDAchBC,SAAM,SAAC,yBAAyB;;;;0BAtBrC;KAYA;;;;;;ACZA;QAcE,yBACU,QAAkB,EACiB,aAAa;YADhD,aAAQ,GAAR,QAAQ,CAAU;YACiB,kBAAa,GAAb,aAAa,CAAA;YALlD,2BAAsB,GAAG,KAAK,CAAC;YAC/B,wBAAmB,GAAyB,IAAIN,oBAAe,CAAM,IAAI,CAAC,CAAC;SAK9E;;;;;;QAEL,mCAAS;;;;;YAAT,UAAU,OAAyB,EAAE,IAAiB;gBAAtD,iBAuBC;gBAtBC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;gBAClD,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CACrFU,oBAAU;;;mBAAC,UAAA,KAAK;oBACd,IAAI,KAAK,YAAYK,oBAAiB,EAAE;wBACtC,QAAQ,oBAAoB,KAAK,IAAE,MAAM;4BACvC,KAAK,GAAG;gCACN,IAAI,KAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,cAAc,KAAK,WAAW,EAAE;oCACjE,OAAO,KAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,cAAc,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;iCACrE;qCAAM;oCACL,KAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,MAAM,EAAE,CAAC;oCACxC,OAAON,eAAU,CAAC,KAAK,CAAC,CAAC;iCAC1B;gCACD,MAAM;4BACR;gCACE,OAAOA,eAAU,CAAC,KAAK,CAAC,CAAC;gCACzB,MAAM;yBACT;qBACF;yBAAM;wBACL,OAAOA,eAAU,CAAC,KAAK,CAAC,CAAC;qBAC1B;iBACF,EAAC,CACH,CAAC;aACH;;oBAlCFN,aAAU;;;;;wBARkBI,WAAQ;wDAgBhCD,SAAM,SAAC,yBAAyB;;;QA4BrC,sBAAC;KApCD;;;;;;ACRA;QAKA;SAeC;;;;;QATe,kBAAO;;;;YAArB,UAAsB,aAAkB;gBACtC,OAAO;oBACL,QAAQ,EAAE,UAAU;oBACpB,SAAS,EAAE;wBACT,EAAE,OAAO,EAAEU,oBAAiB,EAAE,QAAQ,EAAE,eAAe,EAAE,KAAK,EAAE,IAAI,EAAE;wBACtE,EAAE,OAAO,EAAE,yBAAyB,EAAE,QAAQ,EAAE,aAAa,EAAE;qBAChE;iBACF,CAAC;aACH;;oBAdFC,WAAQ,SAAC;wBACR,YAAY,EAAE,EAAE;wBAChB,OAAO,EAAE,EAAE;wBACX,OAAO,EAAE,EAAE;qBACZ;;QAWD,iBAAC;KAfD;;;;;;ACJA;QAWE,mBACU,WAAwB,EACW,aAAa;YADhD,gBAAW,GAAX,WAAW,CAAa;YACW,kBAAa,GAAb,aAAa,CAAA;SACrD;;;;;;QAEL,+BAAW;;;;;YAAX,UACE,IAA4B,EAC5B,KAA0B;gBAC1B,IAAI,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,QAAQ,EAAE,EAAE;oBAC7C,OAAO,IAAI,CAAC;iBACb;qBAAM;oBACL,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,MAAM,EAAE,CAAC;oBACxC,OAAO,KAAK,CAAC;iBACd;aACF;;oBAnBFd,aAAU,SAAC;wBACV,UAAU,EAAE,MAAM;qBACnB;;;;;wBAJQ,WAAW;wDASfG,SAAM,SAAC,yBAAyB;;;;wBAdrC;KAOA;;;;;;ACPA;QAWE,oBACU,WAAwB,EACxB,MAAc,EACqB,aAAa;YAFhD,gBAAW,GAAX,WAAW,CAAa;YACxB,WAAM,GAAN,MAAM,CAAQ;YACqB,kBAAa,GAAb,aAAa,CAAA;SACrD;;;;;;QAEL,gCAAW;;;;;YAAX,UACE,IAA4B,EAC5B,KAA0B;gBAC1B,IAAI,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,QAAQ,EAAE,EAAE;oBAC7C,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;oBAC/B,OAAO,KAAK,CAAC;iBACd;qBAAM;oBACL,OAAO,IAAI,CAAC;iBACb;aACF;;oBApBFH,aAAU,SAAC;wBACV,UAAU,EAAE,MAAM;qBACnB;;;;;wBAJQ,WAAW;wBAH+CD,WAAM;wDAapEI,SAAM,SAAC,yBAAyB;;;;yBAdrC;KAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}
