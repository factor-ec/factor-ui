{"version":3,"file":"factor-auth.js.map","sources":["ng://factor-auth/lib/auth.service.ts","ng://factor-auth/lib/auth.guard.ts","ng://factor-auth/lib/login.guard.ts","ng://factor-auth/lib/auth-interceptor.ts","ng://factor-auth/lib/auth.module.ts"],"sourcesContent":["import { Inject, Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable } from \"rxjs\";\nimport { tap } from 'rxjs/operators';\n\nimport { StorageService } from 'factor-utils';\n\nimport { Token } from './models/token';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private loggedInSource: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n  public loggedIn: Observable<boolean> = this.loggedInSource.asObservable();\n\n  constructor(\n    private http: HttpClient,\n    private storageService: StorageService,\n    @Inject('FactorAuthConfiguration') private configuration\n  ) {\n    if (this.getToken() && this.getToken().access_token) {\n      this.loggedInSource.next(true);\n    }\n  }\n\n  checkLoggedIn() {\n    if (this.storageService.get('token', 'localStorage')) {\n      this.loggedInSource.next(true);\n    } else {\n      this.loggedInSource.next(false);\n    }\n    return this.loggedIn;\n  }\n  getToken(): Token {\n    return this.storageService.get('token', 'localStorage');\n  }\n  login(form: { username: string, password: string }): Observable<Token> {\n    const params = {\n      client_id: this.configuration.clientId,\n      client_secret: this.configuration.clientSecret,\n      grant_type: 'password',\n      response_type: 'token',\n      username: form.username,\n      password: form.password,\n      state: Date.now()\n    };\n    return this.http.post(this.configuration.tokenUrl, params).pipe(tap((token: Token) => {\n      this.storageService.set('token', token, 'localStorage');\n      this.loggedInSource.next(true);\n    }));\n  }\n  logout(): void {\n    this.storageService.delete('token', 'localStorage');\n    this.loggedInSource.next(false);\n  }\n  refreshToken(): Observable<Token> {\n    const token = this.storageService.get('token', 'localStorage');\n    const url = `${this.configuration.tokenUrl}`;\n    const params = {\n      client_id: this.configuration.clientId,\n      client_secret: this.configuration.clientSecret,\n      grant_type: 'refresh_token',\n      refresh_token: token.refresh_token\n    };\n    return this.http.get(url, { params: params }).pipe(tap((token: Token) => {\n      this.storageService.set('token', token, 'localStorage');\n    }));\n  }\n}\n","\nimport { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(\n    private authService: AuthService\n  ) { }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n    if (this.authService.getToken()) {\n      //TODO Verify session on server with Observable\n      return true;\n    } else {\n      this.authService.logout();\n      return false;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginGuard implements CanActivate {\n\n  constructor(\n    private authService: AuthService,\n    private router: Router\n  ) { }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n    if (this.authService.getToken()) {\n      this.router.navigateByUrl('/');\n      return false;\n    } else {\n      return true;\n    }\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { HttpHandler, HttpRequest, HttpErrorResponse, HttpSentEvent, HttpHeaderResponse, HttpProgressEvent, HttpResponse, HttpUserEvent } from '@angular/common/http';\nimport { Observable, BehaviorSubject, throwError } from 'rxjs';\nimport { catchError, filter, take, switchMap, finalize, share } from 'rxjs/operators';\n\nimport { AuthService } from './auth.service';\nimport { Token } from './models/token';\n\n@Injectable()\nexport class AuthInterceptor {\n  private authService: AuthService;\n  private refreshTokenInProgress = false;\n  private refreshTokenSubject: BehaviorSubject<any> = new BehaviorSubject<any>(null);\n\n  constructor(\n    private injector: Injector\n  ) { }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpSentEvent | HttpHeaderResponse | HttpProgressEvent | HttpResponse<any> | HttpUserEvent<any> | any> {\n    this.authService = this.injector.get(AuthService);\n    return next.handle(this.addAuthenticationToken(request)).pipe(\n      catchError(error => {\n        if (error instanceof HttpErrorResponse) {\n          switch ((<HttpErrorResponse>error).status) {\n            case 401:\n              return this.authService.getToken().refresh_token? this.handle401Error(request, next) : throwError(error);\n              break;\n            default:\n              return throwError(error);\n              break;\n          }\n        } else {\n          return throwError(error);\n        }\n      })\n    );\n  }\n  handle401Error(request: HttpRequest<any>, next: HttpHandler): Observable<any> {\n    if (!this.refreshTokenInProgress) {\n      this.refreshTokenInProgress = true;\n      this.refreshTokenSubject.next(null);\n      return this.authService.refreshToken().pipe(\n        switchMap((newToken: Token) => {\n          if (newToken) {\n            this.refreshTokenSubject.next(newToken);\n            return next.handle(this.addAuthenticationToken(request));\n          }\n\n          // If we don't get a new token, we are in trouble so logout.\n          this.authService.logout();\n          return throwError('');\n        }),\n        catchError(error => {\n          // If there is an exception calling 'refreshToken', bad news so logout.\n          this.authService.logout();\n          return throwError(error);\n        }),\n        share(),\n        finalize(() => {\n          this.refreshTokenInProgress = false;\n        }),\n      );\n    } else {\n      return this.refreshTokenSubject.pipe(\n        filter(token => token != null),\n        take(1),\n        switchMap(token => {\n          return next.handle(this.addAuthenticationToken(request));\n        })\n      );\n    }\n  }\n  addAuthenticationToken(request): HttpRequest<any> {\n    const token: Token = this.authService.getToken();\n\n    // If access token is null this means that user is not logged in\n    // And we return the original request\n    if (!token || request.url.includes(\"token\")) {\n      return request;\n    }\n\n    // We clone the request, because the original request is immutable\n    return request.clone({\n      setHeaders: {\n        Authorization: `${token.token_type} ${token.access_token}`\n      }\n    });\n  }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { AuthInterceptor } from './auth-interceptor';\n\n@NgModule({\n  declarations: [],\n  imports: [],\n  exports: []\n})\nexport class AuthModule {\n  public static forRoot(configuration: any): ModuleWithProviders {\n    return {\n      ngModule: AuthModule,\n      providers: [\n        { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },\n        { provide: 'FactorAuthConfiguration', useValue: configuration }\n      ]\n    };\n  }\n}\n"],"names":[],"mappings":"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"}
