{"version":3,"file":"factor-auth.js.map","sources":["ng://factor-auth/lib/jwt.service.ts","ng://factor-auth/lib/oauth.service.ts","ng://factor-auth/lib/auth.service.ts","ng://factor-auth/lib/auth-interceptor.ts","ng://factor-auth/lib/auth.module.ts","ng://factor-auth/lib/auth.guard.ts","ng://factor-auth/lib/login.guard.ts"],"sourcesContent":["import { Inject, Injectable, Injector } from '@angular/core';\nimport { HttpClient, HttpRequest, HttpHandler } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject, Observable } from \"rxjs\";\nimport { tap } from 'rxjs/operators';\n\nimport { StorageService } from 'factor-utils';\n\nimport { AuthProvider } from './auth-provider';\nimport { Login } from './models/login';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class JwtService implements AuthProvider {\n  private loggedInSource: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n  public loggedIn: Observable<boolean> = this.loggedInSource.asObservable();\n  private tokenKey = 'auth_jwt';\n\n  constructor(\n    private http: HttpClient,\n    private storageService: StorageService,\n    @Inject('FactorAuthConfiguration') private configuration,\n    private injector: Injector\n  ) {\n    this.checkLoggedIn();\n  }\n\n  addAuthenticationToken(request: HttpRequest<any>): HttpRequest<any> {\n    const token: string = this.getToken();\n\n    // If access token is null this means that user is not logged in\n    // And we return the original request\n    if (!token || request.url.includes(\"token\")) {\n      return request;\n    }\n\n    // We clone the request, because the original request is immutable\n    return request.clone({\n      setHeaders: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n  }\n  checkLoggedIn(): Observable<boolean> {\n    if (this.getToken()) {\n      this.loggedInSource.next(true);\n    } else {\n      this.loggedInSource.next(false);\n    }\n    return this.loggedIn;\n  }\n  getToken(): string {\n    return this.storageService.get(this.tokenKey, 'local');\n  }\n  login(data: Login): Observable<any> {\n    return this.http.post(this.configuration.tokenUrl, data).pipe(tap((token: any) => {\n      this.storageService.set(this.tokenKey, token.token, 'local');\n      this.loggedInSource.next(true);\n    }));\n  }\n  logout(): void {\n    this.storageService.delete(this.tokenKey, 'local');\n    this.loggedInSource.next(false);\n    if (this.configuration.nosessionUrl) {\n      const router = this.injector.get(Router);\n      router.navigateByUrl(this.configuration.nosessionUrl);\n    }\n  }\n}\n","import { Inject, Injectable, Injector } from '@angular/core';\nimport { HttpClient, HttpRequest, HttpHandler } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject, Observable, throwError } from \"rxjs\";\nimport { tap, catchError, filter, take, switchMap, finalize, share } from 'rxjs/operators';\n\nimport { StorageService } from 'factor-utils';\n\nimport { AuthProvider } from './auth-provider';\nimport { Token } from './models/token';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OAuthService implements AuthProvider {\n  private loggedInSource: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n  public loggedIn: Observable<boolean> = this.loggedInSource.asObservable();\n  private refreshTokenInProgress = false;\n  private refreshTokenSubject: BehaviorSubject<any> = new BehaviorSubject<any>(null);\n\n  constructor(\n    private http: HttpClient,\n    private storageService: StorageService,\n    @Inject('FactorAuthConfiguration') private configuration,\n    private injector: Injector\n  ) {\n    this.checkLoggedIn();\n  }\n\n  addAuthenticationToken(request): HttpRequest<any> {\n    const token: Token = this.getToken();\n\n    // If access token is null this means that user is not logged in\n    // And we return the original request\n    if (!token || request.url.includes(\"token\")) {\n      return request;\n    }\n\n    // We clone the request, because the original request is immutable\n    return request.clone({\n      setHeaders: {\n        Authorization: `${token.token_type} ${token.access_token}`\n      }\n    });\n  }\n  checkLoggedIn() {\n    if (this.getToken()) {\n      this.loggedInSource.next(true);\n    } else {\n      this.loggedInSource.next(false);\n    }\n    return this.loggedIn;\n  }\n  getToken(): Token {\n    return this.storageService.get('token', 'local');\n  }\n  handle401Error(request: HttpRequest<any>, next: HttpHandler): Observable<any> {\n    if (!this.refreshTokenInProgress) {\n      this.refreshTokenInProgress = true;\n      this.refreshTokenSubject.next(null);\n      return this.refreshToken().pipe(\n        switchMap((newToken: Token) => {\n          if (newToken) {\n            this.refreshTokenSubject.next(newToken);\n            return next.handle(this.addAuthenticationToken(request));\n          }\n\n          // If we don't get a new token, we are in trouble so logout.\n          this.logout();\n          return throwError('');\n        }),\n        catchError(error => {\n          // If there is an exception calling 'refreshToken', bad news so logout.\n          this.logout();\n          return throwError(error);\n        }),\n        share(),\n        finalize(() => {\n          this.refreshTokenInProgress = false;\n        }),\n      );\n    } else {\n      return this.refreshTokenSubject.pipe(\n        filter(token => token != null),\n        take(1),\n        switchMap(token => {\n          return next.handle(this.addAuthenticationToken(request));\n        })\n      );\n    }\n  }\n  login(form: { username: string, password: string }): Observable<Token> {\n    const params = {\n      client_id: this.configuration.clientId,\n      client_secret: this.configuration.clientSecret,\n      grant_type: 'password',\n      response_type: 'token',\n      username: form.username,\n      password: form.password,\n      state: Date.now()\n    };\n    return this.http.post(this.configuration.tokenUrl, params).pipe(tap((token: Token) => {\n      this.storageService.set('token', token, 'local');\n      this.loggedInSource.next(true);\n    }));\n  }\n  logout(): void {\n    this.storageService.delete('token', 'local');\n    this.loggedInSource.next(false);\n    if (this.configuration.nosessionUrl) {\n      const router = this.injector.get(Router);\n      router.navigateByUrl(this.configuration.nosessionUrl);\n    }\n  }\n  refreshToken(): Observable<Token> {\n    const token = this.getToken();\n    const url = `${this.configuration.tokenUrl}`;\n    const params = {\n      client_id: this.configuration.clientId,\n      client_secret: this.configuration.clientSecret,\n      grant_type: 'refresh_token',\n      refresh_token: token.refresh_token\n    };\n    return this.http.get(url, { params: params }).pipe(tap((token: Token) => {\n      this.storageService.set('token', token, 'local');\n      this.loggedInSource.next(true);\n    }));\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable } from \"rxjs\";\nimport { tap } from 'rxjs/operators';\n\nimport { StorageService } from 'factor-utils';\n\nimport { JwtService } from './jwt.service';\nimport { OAuthService } from './oauth.service';\nimport { AuthProvider } from './auth-provider';\nimport { Token } from './models/token';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  \n  constructor(\n    private http: HttpClient,\n    private storageService: StorageService,\n    private jwtService: JwtService,\n    private oauthService: OAuthService,\n    @Inject('FactorAuthConfiguration') private configuration\n  ) {\n    this.getProvider().checkLoggedIn();\n  }\n\n  getProvider(): AuthProvider {\n    return this.configuration.type === 'oauth' ? this.oauthService : this.jwtService;\n  }\n}\n","import { Inject, Injectable, Injector } from '@angular/core';\nimport { HttpHandler, HttpRequest, HttpErrorResponse, HttpSentEvent, HttpHeaderResponse, HttpProgressEvent, HttpResponse, HttpUserEvent } from '@angular/common/http';\nimport { Observable, BehaviorSubject, throwError } from 'rxjs';\nimport { catchError, filter, take, switchMap, finalize, share } from 'rxjs/operators';\n\nimport { AuthService } from './auth.service';\nimport { Token } from './models/token';\n\n@Injectable()\nexport class AuthInterceptor {\n  private authService: any;\n  private refreshTokenInProgress = false;\n  private refreshTokenSubject: BehaviorSubject<any> = new BehaviorSubject<any>(null);\n\n  constructor(\n    private injector: Injector,\n    @Inject('FactorAuthConfiguration') private configuration\n  ) { }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpSentEvent | HttpHeaderResponse | HttpProgressEvent | HttpResponse<any> | HttpUserEvent<any> | any> {\n    this.authService = this.injector.get(AuthService);\n    return next.handle(this.authService.getProvider().addAuthenticationToken(request)).pipe(\n      catchError(error => {\n        if (error instanceof HttpErrorResponse) {\n          switch ((<HttpErrorResponse>error).status) {\n            case 401:\n              if (this.authService.getProvider().handle401Error !== 'undefined') {\n                return this.authService.getProvider().handle401Error(request, next);\n              } else {\n                this.authService.getProvider().logout();\n                return throwError(error);\n              }\n              break;\n            default:\n              return throwError(error);\n              break;\n          }\n        } else {\n          return throwError(error);\n        }\n      })\n    );\n  }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { AuthInterceptor } from './auth-interceptor';\n\n@NgModule({\n  declarations: [],\n  imports: [],\n  exports: []\n})\nexport class AuthModule {\n  public static forRoot(configuration: any): ModuleWithProviders {\n    return {\n      ngModule: AuthModule,\n      providers: [\n        { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },\n        { provide: 'FactorAuthConfiguration', useValue: configuration }\n      ]\n    };\n  }\n}\n","\nimport { Inject, Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(\n    private authService: AuthService,\n    @Inject('FactorAuthConfiguration') private configuration\n  ) { }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n    if (this.authService.getProvider().getToken()) {\n      return true;\n    } else {\n      this.authService.getProvider().logout();\n      return false;\n    }\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginGuard implements CanActivate {\n\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    @Inject('FactorAuthConfiguration') private configuration\n  ) { }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n    if (this.authService.getProvider().getToken()) {\n      this.router.navigateByUrl('/');\n      return false;\n    } else {\n      return true;\n    }\n  }\n}\n"],"names":[],"mappings":"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"}
