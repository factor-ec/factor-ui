{"version":3,"sources":["ng://factor-inputs/lib/inputs.service.ts","ng://factor-inputs/lib/file-picker/file-picker.component.ts","ng://factor-inputs/lib/invalid-feedback/invalid-feedback.component.ts","ng://factor-inputs/lib/inputs.module.ts"],"names":["InputsService","Injectable","args","providedIn","FilePickerComponent","elementRef","this","propagateChange","_","createInput","Object","defineProperty","prototype","value","fileInput","accept","disabled","multiple","ngOnInit","_this","componentElement","nativeElement","document","createElement","style","display","type","addEventListener","event","FileReader","loadValue","target","files","appendChild","length","data_1","i","file","item","reader","readAsDataURL","onload","push","data","result","lastModifiedDate","name","size","openDialog","click","_value","writeValue","registerOnChange","fn","registerOnTouched","Component","selector","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","ElementRef","Input","HostBinding","HostListener","InvalidFeedbackComponent","defaultMessages","required","params","min","max","minlength","requiredLength","maxlength","pattern","email","messages","getError","control","errors","keys","map","field","getMessage","fname","getControlName","replace","toLowerCase","l","toUpperCase","msg","dirty","formGroup","parent","controls","find","InputsModule","NgModule","declarations","imports","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InputsService {\n\n  constructor() { }\n}\n","import { Component, ElementRef, forwardRef, HostBinding, HostListener, Input, OnInit, Output } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Component({\n  selector: 'ft-file-picker',\n  templateUrl: './file-picker.component.html',\n  styleUrls: ['./file-picker.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => FilePickerComponent),\n      multi: true\n    }\n  ]\n})\nexport class FilePickerComponent implements OnInit, ControlValueAccessor {\n  @Input()\n  set accept (value: string) {\n    this.fileInput.accept = value;\n  }\n  @Input()\n  set disabled (value: boolean) {\n    this.fileInput.disabled = value;\n  }\n  @Input()\n  set multiple (value: boolean) {\n    this.fileInput.multiple = value;\n  }\n  @HostBinding('class.dragover') dragover: boolean;\n  fileInput: HTMLInputElement;\n  _value: string;\n  propagateChange = (_: any) => { };\n\n  constructor(private elementRef: ElementRef) {\n    this.createInput();\n  }\n\n  ngOnInit() {\n\n  }\n  createInput() {\n    const componentElement = this.elementRef.nativeElement;\n    this.fileInput = document.createElement('input');\n    this.fileInput.style.display = 'none';\n    this.fileInput.type = 'file';\n    this.fileInput.addEventListener('change', (event: any) => {\n      const reader = new FileReader();\n      this.loadValue(event.target.files);\n    });\n    componentElement.appendChild(this.fileInput);\n  }\n  loadValue(files) {\n    if (files && files.length>0) {\n      let data: any[] = [];\n      for (let i = 0; i<files.length; i++) {\n        const file = files.item(i);\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = () => {\n          data.push({\n            data: reader.result,\n            lastModifiedDate: file.lastModifiedDate,\n            name: file.name,\n            size: file.size,\n            type: file.type\n          });\n          if (data.length==files.length) {\n            this.value = data.length>0? data : null;\n          }\n        };\n      }\n    }\n  }\n  @HostListener('click')\n  openDialog() {\n    this.fileInput.click();\n  }\n  get value() {\n    return this._value;\n  }\n  set value(value: any) {\n    this._value = value;\n    this.propagateChange(this._value);\n  }\n  writeValue(value: any) { }\n  registerOnChange(fn) {\n    this.propagateChange = fn;\n  }\n  registerOnTouched() { }\n}\n","import { Component, Input } from '@angular/core';\n\nimport { AbstractControlDirective, AbstractControl } from '@angular/forms';\n/**\n * Componente para mostrar mensajes de error en los inputs\n */\n@Component({\n  selector: 'ft-invalid-feedback',\n  templateUrl: './invalid-feedback.component.html',\n  styleUrls: ['./invalid-feedback.component.scss']\n})\nexport class InvalidFeedbackComponent {\n  /**\n   * CatÃ¡logo de mensajes segÃºn el tipo de error\n   */\n  private readonly defaultMessages = {\n    'required': (params) => 'Is required',\n    'min': (params) => 'Should be a valid',\n    'max': (params) => 'Should be a valid',\n    'minlength': (params) => '##FIELD## should be minimum ' + params.requiredLength + ' characters',\n    'maxlength': (params) => '##FIELD## should not be greater then ' + params.requiredLength + ' characters',\n    'pattern': (params) => 'Should be a valid',\n    'email': (params) => \"Should be valid email.\",\n    'file': (params) => 'File must be valid'\n  };\n  @Input()\n  private messages: any = {};\n  /**\n   * El input para mostrar el mensaje\n   */\n  @Input()\n  private control: AbstractControlDirective | AbstractControl;\n  /**\n   * MÃ©toro que devuelve el error segÃºn corresponda\n   */\n  getError(): string {\n    let objects = this.control.errors;\n    if (objects !== null) {\n      var errors = Object.keys(this.control.errors)\n        .map(field => this.getMessage(field, this.control.errors[field], this.control));\n      return errors[0];\n    }\n  }\n  /**\n   * MÃ©todo que obtiene el mensaje de error\n   */\n  private getMessage(type: string, params: any, control: any) {\n    var fname = this.getControlName(control);\n    fname = fname.replace(\"_\", \" \").replace(\" id\", \"\").toLowerCase();\n    fname = fname.replace(/\\b\\w/g, l => l.toUpperCase())\n\n    var msg = this.messages[type] || this.defaultMessages[type](params) || 'Error';\n    return control.dirty? msg.replace(\"##FIELD##\", fname) : '';\n  }\n  /**\n   * Obtiene el name del control (input)\n   * @param control AbstractControl es el control con sus propiedades\n   */\n  getControlName(control: AbstractControl): string | null {\n    const formGroup = control.parent.controls;\n    return Object.keys(formGroup).find(name => control === formGroup[name]) || null;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { FilePickerComponent } from './file-picker/file-picker.component';\nimport { InvalidFeedbackComponent } from './invalid-feedback/invalid-feedback.component';\n\n@NgModule({\n  declarations: [\n    FilePickerComponent,\n    InvalidFeedbackComponent\n  ],\n  imports: [\n  ],\n  exports: [\n    FilePickerComponent,\n    InvalidFeedbackComponent\n  ]\n})\nexport class InputsModule { }\n"]}